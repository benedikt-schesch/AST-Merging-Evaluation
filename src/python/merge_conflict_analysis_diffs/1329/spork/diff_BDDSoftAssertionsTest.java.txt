====1
1:23a
2:24,28c
3:24,28c
  import java.time.LocalDateTime;
  import java.time.LocalTime;
  import java.time.OffsetDateTime;
  import java.time.OffsetTime;
  import java.time.ZoneOffset;
====1
1:24a
2:30,33c
3:30,33c
  import java.util.Optional;
  import java.util.OptionalDouble;
  import java.util.OptionalInt;
  import java.util.OptionalLong;
====3
1:26a
2:35a
3:36c
  import org.assertj.core.api.test.ComparableExample;
====1
1:140a
2:150,154c
3:151,155c
        softly.then(Optional.of("not empty")).isEqualTo("empty");
        // TODO should be caught : softly.assertThat(Optional.of("not empty")).isEmpty();
        softly.then(OptionalInt.of(0)).isEqualTo(1);
        softly.then(OptionalDouble.of(0.0)).isEqualTo(1.0);
        softly.then(OptionalLong.of(0L)).isEqualTo(1L);
====1
1:141a
2:156,161c
3:157,162c
  
        softly.then(LocalTime.of(12, 0)).isEqualTo(LocalTime.of(13, 0));
        softly.then(OffsetTime.of(12, 0, 0, 0, ZoneOffset.UTC)).isEqualTo(OffsetTime.of(13, 0, 0, 0, ZoneOffset.UTC));
        softly.then(OffsetDateTime.MIN).isEqualTo(LocalDateTime.MAX);
        // softly.then(completedFuture("done")).hasFailed();
  
====1
1:142a
2:163c
3:164c
  
====1
1:143a
2:165c
3:166c
  
====1
1:146c
        assertThat(errors).hasSize(40);
2:168,169c
3:169,170c
        assertThat(errors).hasSize(47);
  
====1
1:219c
        assertThat(errors.get(39)).contains(String.format("%nExpecting port of"));
2:241a
3:242a
====1
1:220a
2:243,251c
3:244,252c
        assertThat(errors.get(39)).isEqualTo("expected:<[\"empty\"]> but was:<[Optional[not empty]]>");
        assertThat(errors.get(40)).isEqualTo("expected:<[1]> but was:<[OptionalInt[0]]>");
        assertThat(errors.get(41)).isEqualTo("expected:<[1.0]> but was:<[OptionalDouble[0.0]]>");
        assertThat(errors.get(42)).isEqualTo("expected:<[1L]> but was:<[OptionalLong[0]]>");
        assertThat(errors.get(43)).contains(String.format("%nExpecting port of"));
        assertThat(errors.get(44)).isEqualTo("expected:<1[3]:00> but was:<1[2]:00>");
        assertThat(errors.get(45)).isEqualTo("expected:<1[3]:00Z> but was:<1[2]:00Z>");
        assertThat(errors.get(46)).isEqualTo("expected:<[+999999999-12-31T23:59:59.999999999]> but was:<[-999999999-01-01T00:00+18:00]>");
        // assertThat(errors.get(47)).isEqualTo("");
====3
1:223a
2:254a
3:256,263c
    @Test
    public void should_work_with_comparable() throws Exception {
      ComparableExample example1 = new ComparableExample(0);
      ComparableExample example2 = new ComparableExample(0);
      softly.then(example1).isEqualByComparingTo(example2);
      softly.assertAll();
    }
  
