====1
1:27a
2:28,30c
3:28,30c
  import java.time.LocalTime;
  import java.time.OffsetTime;
  import java.time.ZoneOffset;
====1
1:30a
2:34,38c
3:34,38c
  import java.util.Optional;
  import java.util.OptionalDouble;
  import java.util.OptionalInt;
  import java.util.OptionalLong;
  import java.util.concurrent.CompletableFuture;
====3
1:33a
2:41a
3:42c
  import org.assertj.core.api.test.ComparableExample;
====1
1:190a
2:199c
3:200c
  
====1
1:191a
2:201,208c
3:202,209c
  
        softly.assertThat(LocalTime.of(12, 00)).isEqualTo(LocalTime.of(13,00));
        softly.assertThat(OffsetTime.of(12, 0, 0, 0, ZoneOffset.UTC)).isEqualTo(OffsetTime.of(13, 0, 0, 0, ZoneOffset.UTC));
  
        softly.assertThat(Optional.of("not empty")).isEqualTo("empty");
        softly.assertThat(OptionalInt.of(0)).isEqualTo(1);
        softly.assertThat(OptionalDouble.of(0.0)).isEqualTo(1.0);
        softly.assertThat(OptionalLong.of(0L)).isEqualTo(1L);
====1
1:192a
2:210c
3:211c
        softly.assertThat(CompletableFuture.completedFuture("done")).hasFailed();
====1
1:198c
        assertThat(errors).hasSize(41);
2:216c
3:217c
        assertThat(errors).hasSize(48);
====1
1:272,277c
                                                           + " <{\"54\"=\"55\"}>%n"
                                                           + "to contain:%n"
                                                           + " <[MapEntry[key=\"1\", value=\"2\"]]>%n"
                                                           + "but could not find:%n"
                                                           + " <[MapEntry[key=\"1\", value=\"2\"]]>%n"));
        assertThat(errors.get(40)).contains("Expecting port of");
2:290,304c
3:291,305c
                                             + " <{\"54\"=\"55\"}>%n"
                                             + "to contain:%n"
                                             + " <[MapEntry[key=\"1\", value=\"2\"]]>%n"
                                             + "but could not find:%n"
                                             + " <[MapEntry[key=\"1\", value=\"2\"]]>%n"));
  
        assertThat(errors.get(40)).isEqualTo("expected:<1[3]:00> but was:<1[2]:00>");
        assertThat(errors.get(41)).isEqualTo("expected:<1[3]:00Z> but was:<1[2]:00Z>");
  
        assertThat(errors.get(42)).isEqualTo("expected:<[\"empty\"]> but was:<[Optional[not empty]]>");
        assertThat(errors.get(43)).isEqualTo("expected:<[1]> but was:<[OptionalInt[0]]>");
        assertThat(errors.get(44)).isEqualTo("expected:<[1.0]> but was:<[OptionalDouble[0.0]]>");
        assertThat(errors.get(45)).isEqualTo("expected:<[1L]> but was:<[OptionalLong[0]]>");
        assertThat(errors.get(46)).contains("Expecting port of");
        assertThat(errors.get(47)).contains("to have failed");
====1
1:279c
    }
2:306c
3:307c
    }  
====3
1:523a
2:550a
3:552,559c
    @Test
    public void should_work_with_comparable() throws Exception {
      ComparableExample example1 = new ComparableExample(0);
      ComparableExample example2 = new ComparableExample(0);
      softly.assertThat(example1).isEqualByComparingTo(example2);
      softly.assertAll();
    }
  
