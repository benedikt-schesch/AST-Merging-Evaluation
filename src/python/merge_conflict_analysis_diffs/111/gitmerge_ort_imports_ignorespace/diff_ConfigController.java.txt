====3
1:18a
2:18a
3:19c
  import com.alibaba.nacos.api.config.ConfigType;
====3
1:22a
2:22a
3:24c
  import com.alibaba.nacos.common.model.RestResultUtils;
====1
1:34a
2:35c
3:37c
  import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
====1
1:38c
  import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
2:38a
3:40a
====3
1:45a
2:45a
3:48c
  import com.alibaba.nacos.common.utils.NamespaceUtil;
====3
1:48c
2:48c
  import com.alibaba.nacos.core.utils.InetUtils;
3:51c
  import com.alibaba.nacos.sys.utils.InetUtils;
====3
1:93,94c
2:93,94c
      private static final String NAMESPACE_PUBLIC_KEY = "public";
      
3:95a
====3
1:137a
2:137a
3:139,142c
          //check type
          if (!ConfigType.isValidType(type)) {
              type = ConfigType.getDefaultType().getType();
          }
====3
1:178c
2:178c
                  .logPersistenceEvent(dataId, group, tenant, requestIpApp, time.getTime(), InetUtils.getSelfIp(),
3:183c
                  .logPersistenceEvent(dataId, group, tenant, requestIpApp, time.getTime(), InetUtils.getSelfIP(),
====3
1:199c
2:199c
          tenant = processTenant(tenant);
3:204c
          tenant = NamespaceUtil.processNamespaceParameter(tenant);
====3
1:283c
2:283c
          return ResultBuilder.buildSuccessResult(true);
3:288c
          return RestResultUtils.success(true);
====3
1:472c
2:472c
          tenant = processTenant(tenant);
3:477c
          tenant = NamespaceUtil.processNamespaceParameter(tenant);
====3
1:527c
2:527c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
3:532c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====3
1:530,534c
2:530,534c
          if (StringUtils.isNotBlank(namespace)) {
              if (persistService.tenantInfoCountByTenantId(namespace) <= 0) {
                  failedData.put("succCount", 0);
                  return ResultBuilder.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
              }
3:535,538c
          namespace = NamespaceUtil.processNamespaceParameter(namespace);
          if (StringUtils.isNotBlank(namespace) && persistService.tenantInfoCountByTenantId(namespace) <= 0) {
              failedData.put("succCount", 0);
              return RestResultUtils.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
====3
1:535a
2:535a
3:540c
          
====3
1:548c
2:548c
                          return ResultBuilder.buildResult(ResultCodeEnum.METADATA_ILLEGAL, failedData);
3:553c
                          return RestResultUtils.buildResult(ResultCodeEnum.METADATA_ILLEGAL, failedData);
====3
1:560c
2:560c
                          return ResultBuilder.buildResult(ResultCodeEnum.DATA_VALIDATION_FAILED, failedData);
3:565c
                          return RestResultUtils.buildResult(ResultCodeEnum.DATA_VALIDATION_FAILED, failedData);
====3
1:584c
2:584c
              return ResultBuilder.buildResult(ResultCodeEnum.PARSING_DATA_FAILED, failedData);
3:589c
              return RestResultUtils.buildResult(ResultCodeEnum.PARSING_DATA_FAILED, failedData);
====3
1:588c
2:588c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
3:593c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====3
1:601c
2:601c
                              requestIpApp, time.getTime(), InetUtils.getSelfIp(),
3:606c
                              requestIpApp, time.getTime(), InetUtils.getSelfIP(),
====3
1:604c
2:604c
          return ResultBuilder.buildSuccessResult("导入成功", saveResult);
3:609c
          return RestResultUtils.success("导入成功", saveResult);
====3
1:628c
2:628c
              return ResultBuilder.buildResult(ResultCodeEnum.NO_SELECTED_CONFIG, failedData);
3:633c
              return RestResultUtils.buildResult(ResultCodeEnum.NO_SELECTED_CONFIG, failedData);
====3
1:631,634c
2:631,634c
          
          if (NAMESPACE_PUBLIC_KEY.equalsIgnoreCase(namespace)) {
              namespace = "";
          } else if (persistService.tenantInfoCountByTenantId(namespace) <= 0) {
3:636,638c
      
          namespace = NamespaceUtil.processNamespaceParameter(namespace);
          if (StringUtils.isNotBlank(namespace) && persistService.tenantInfoCountByTenantId(namespace) <= 0) {
====3
1:636c
2:636c
              return ResultBuilder.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
3:640c
              return RestResultUtils.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
====3
1:650c
2:650c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
3:654c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====3
1:674c
2:674c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
3:678c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====3
1:687c
2:687c
                              requestIpApp, time.getTime(), InetUtils.getSelfIp(),
3:691c
                              requestIpApp, time.getTime(), InetUtils.getSelfIP(),
====3
1:690,697c
2:690,697c
          return ResultBuilder.buildSuccessResult("Clone Completed Successfully", saveResult);
      }
      
      private String processTenant(String tenant) {
          if (StringUtils.isEmpty(tenant) || NAMESPACE_PUBLIC_KEY.equalsIgnoreCase(tenant)) {
              return "";
          }
          return tenant;
3:694c
          return RestResultUtils.success("Clone Completed Successfully", saveResult);
