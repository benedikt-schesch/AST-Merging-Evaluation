====1
1:18a
2:19c
3:19c
  import com.alibaba.nacos.api.config.ConfigType;
====1
1:22a
2:24c
3:24c
  import com.alibaba.nacos.common.model.RestResultUtils;
====
1:34a
2:37,38c
  import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
  <<<<<<< HEAD
3:37c
  import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
====2
1:35a
3:38a
2:40,43c
  ||||||| a41d209d5
  import com.alibaba.nacos.config.server.result.ResultBuilder;
  =======
  >>>>>>> TEMP_RIGHT_BRANCH
====1
1:38c
  import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
2:45a
3:40a
====1
1:45a
2:53c
3:48c
  import com.alibaba.nacos.common.utils.NamespaceUtil;
====1
1:48c
  import com.alibaba.nacos.core.utils.InetUtils;
2:56c
3:51c
  import com.alibaba.nacos.sys.utils.InetUtils;
====1
1:93,94c
      private static final String NAMESPACE_PUBLIC_KEY = "public";
      
2:100a
3:95a
====1
1:137a
2:144,147c
3:139,142c
          //check type
          if (!ConfigType.isValidType(type)) {
              type = ConfigType.getDefaultType().getType();
          }
====1
1:178c
                  .logPersistenceEvent(dataId, group, tenant, requestIpApp, time.getTime(), InetUtils.getSelfIp(),
2:188c
3:183c
                  .logPersistenceEvent(dataId, group, tenant, requestIpApp, time.getTime(), InetUtils.getSelfIP(),
====1
1:199c
          tenant = processTenant(tenant);
2:209c
3:204c
          tenant = NamespaceUtil.processNamespaceParameter(tenant);
====1
1:283c
          return ResultBuilder.buildSuccessResult(true);
2:293c
3:288c
          return RestResultUtils.success(true);
====1
1:472c
          tenant = processTenant(tenant);
2:482c
3:477c
          tenant = NamespaceUtil.processNamespaceParameter(tenant);
====1
1:527c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
2:537c
3:532c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====
1:530,534c
          if (StringUtils.isNotBlank(namespace)) {
              if (persistService.tenantInfoCountByTenantId(namespace) <= 0) {
                  failedData.put("succCount", 0);
                  return ResultBuilder.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
              }
2:540,543c
          namespace = NamespaceUtil.processNamespaceParameter(namespace);
          if (StringUtils.isNotBlank(namespace) && persistService.tenantInfoCountByTenantId(namespace) <= 0) {
                  failedData.put("succCount", 0);
              return RestResultUtils.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
3:535,538c
          namespace = NamespaceUtil.processNamespaceParameter(namespace);
          if (StringUtils.isNotBlank(namespace) && persistService.tenantInfoCountByTenantId(namespace) <= 0) {
              failedData.put("succCount", 0);
              return RestResultUtils.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
====1
1:535a
2:545c
3:540c
          
====1
1:548c
                          return ResultBuilder.buildResult(ResultCodeEnum.METADATA_ILLEGAL, failedData);
2:558c
3:553c
                          return RestResultUtils.buildResult(ResultCodeEnum.METADATA_ILLEGAL, failedData);
====1
1:560c
                          return ResultBuilder.buildResult(ResultCodeEnum.DATA_VALIDATION_FAILED, failedData);
2:570c
3:565c
                          return RestResultUtils.buildResult(ResultCodeEnum.DATA_VALIDATION_FAILED, failedData);
====1
1:584c
              return ResultBuilder.buildResult(ResultCodeEnum.PARSING_DATA_FAILED, failedData);
2:594c
3:589c
              return RestResultUtils.buildResult(ResultCodeEnum.PARSING_DATA_FAILED, failedData);
====1
1:588c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
2:598c
3:593c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====1
1:601c
                              requestIpApp, time.getTime(), InetUtils.getSelfIp(),
2:611c
3:606c
                              requestIpApp, time.getTime(), InetUtils.getSelfIP(),
====1
1:604c
          return ResultBuilder.buildSuccessResult("导入成功", saveResult);
2:614c
3:609c
          return RestResultUtils.success("导入成功", saveResult);
====1
1:628c
              return ResultBuilder.buildResult(ResultCodeEnum.NO_SELECTED_CONFIG, failedData);
2:638c
3:633c
              return RestResultUtils.buildResult(ResultCodeEnum.NO_SELECTED_CONFIG, failedData);
====
1:631,634c
          
          if (NAMESPACE_PUBLIC_KEY.equalsIgnoreCase(namespace)) {
              namespace = "";
          } else if (persistService.tenantInfoCountByTenantId(namespace) <= 0) {
2:641,643c
          
          namespace = NamespaceUtil.processNamespaceParameter(namespace);
          if (StringUtils.isNotBlank(namespace) && persistService.tenantInfoCountByTenantId(namespace) <= 0) {
3:636,638c
      
          namespace = NamespaceUtil.processNamespaceParameter(namespace);
          if (StringUtils.isNotBlank(namespace) && persistService.tenantInfoCountByTenantId(namespace) <= 0) {
====1
1:636c
              return ResultBuilder.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
2:645c
3:640c
              return RestResultUtils.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
====1
1:650c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
2:659c
3:654c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====1
1:674c
              return ResultBuilder.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
2:683c
3:678c
              return RestResultUtils.buildResult(ResultCodeEnum.DATA_EMPTY, failedData);
====1
1:687c
                              requestIpApp, time.getTime(), InetUtils.getSelfIp(),
2:696c
3:691c
                              requestIpApp, time.getTime(), InetUtils.getSelfIP(),
====1
1:690,697c
          return ResultBuilder.buildSuccessResult("Clone Completed Successfully", saveResult);
      }
      
      private String processTenant(String tenant) {
          if (StringUtils.isEmpty(tenant) || NAMESPACE_PUBLIC_KEY.equalsIgnoreCase(tenant)) {
              return "";
          }
          return tenant;
2:699c
3:694c
          return RestResultUtils.success("Clone Completed Successfully", saveResult);
