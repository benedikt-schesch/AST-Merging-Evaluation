====
1:21c
  import com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;
2:21,31c
  <<<<<<< HEAD
  import com.alibaba.nacos.config.server.modules.entity.QRolesEntity;
  import com.alibaba.nacos.config.server.modules.entity.RolesEntity;
  import com.alibaba.nacos.config.server.modules.mapstruct.RoleInfoMapStruct;
  import com.alibaba.nacos.config.server.modules.repository.RolesRepository;
  ||||||| a41d209d5
  import com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;
  import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
  import com.alibaba.nacos.config.server.utils.LogUtil;
  import org.apache.commons.lang3.StringUtils;
  =======
3:20a
====1
1:22a
2:33c
3:22c
  import com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;
====
1:24a
2:36c
  >>>>>>> TEMP_RIGHT_BRANCH
3:25,28c
  import com.alibaba.nacos.config.server.modules.entity.QRolesEntity;
  import com.alibaba.nacos.config.server.modules.entity.RolesEntity;
  import com.alibaba.nacos.config.server.modules.mapstruct.RoleInfoMapStruct;
  import com.alibaba.nacos.config.server.modules.repository.RolesRepository;
====1
1:27,29c
  import org.springframework.jdbc.CannotGetJdbcConnectionException;
  import org.springframework.jdbc.core.JdbcTemplate;
  import org.springframework.jdbc.core.RowMapper;
2:39c
3:31c
  import org.springframework.data.domain.PageRequest;
====2
1:31a
3:33a
2:42,48c
  <<<<<<< HEAD
  ||||||| a41d209d5
  import javax.annotation.PostConstruct;
  import java.sql.ResultSet;
  import java.sql.SQLException;
  import java.util.ArrayList;
  =======
====
1:35a
2:53,54c
  import java.util.Collections;
  >>>>>>> TEMP_RIGHT_BRANCH
3:38c
  import java.util.Collections;
====1
1:36a
2:56c
3:40c
  import java.util.stream.Collectors;
====1
1:38c
  import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.ROLE_INFO_ROW_MAPPER;
2:57a
3:41a
====1
1:50,57c
      private ExternalStoragePersistServiceImpl persistService;
      
      private JdbcTemplate jt;
      
      @PostConstruct
      protected void init() {
          jt = persistService.getJdbcTemplate();
      }
2:69c
3:53c
      private RolesRepository rolesRepository;
====1
1:61,81c
          PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
          
          String sqlCountRows = "select count(*) from (select distinct role from roles) roles where ";
          String sqlFetchRows = "select role,username from roles where ";
          
          String where = " 1=1 ";
          
          try {
              Page<RoleInfo> pageInfo = helper
                      .fetchPage(sqlCountRows + where, sqlFetchRows + where, new ArrayList<String>().toArray(), pageNo,
                              pageSize, ROLE_INFO_ROW_MAPPER);
              if (pageInfo == null) {
                  pageInfo = new Page<>();
                  pageInfo.setTotalCount(0);
                  pageInfo.setPageItems(new ArrayList<>());
              }
              return pageInfo;
          } catch (CannotGetJdbcConnectionException e) {
              LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
              throw e;
          }
2:73,80c
3:57,64c
          org.springframework.data.domain.Page<RolesEntity> sPage = rolesRepository
                  .findAll(PageRequest.of(pageNo, pageSize));
          Page<RoleInfo> page = new Page<>();
          page.setPageNumber(sPage.getNumber());
          page.setPagesAvailable(sPage.getTotalPages());
          page.setPageItems(RoleInfoMapStruct.INSTANCE.convertRoleInfoList(sPage.getContent()));
          page.setTotalCount((int) sPage.getTotalElements());
          return page;
====
1:86,104c
          PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
          
          String sqlCountRows = "select count(*) from roles where ";
          String sqlFetchRows = "select role,username from roles where ";
          
          String where = " username='" + username + "' ";
          
          if (StringUtils.isBlank(username)) {
              where = " 1=1 ";
          }
          
          try {
              return helper
                      .fetchPage(sqlCountRows + where, sqlFetchRows + where, new ArrayList<String>().toArray(), pageNo,
                              pageSize, ROLE_INFO_ROW_MAPPER);
          } catch (CannotGetJdbcConnectionException e) {
              LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
              throw e;
          }
2:85,135c
  <<<<<<< HEAD
          org.springframework.data.domain.Page<RolesEntity> sPage = rolesRepository
                  .findAll(QRolesEntity.rolesEntity.username.eq(username), PageRequest.of(pageNo, pageSize));
          Page<RoleInfo> page = new Page<>();
          page.setPageNumber(sPage.getNumber());
          page.setPagesAvailable(sPage.getTotalPages());
          page.setPageItems(RoleInfoMapStruct.INSTANCE.convertRoleInfoList(sPage.getContent()));
          page.setTotalCount((int) sPage.getTotalElements());
          return page;
  ||||||| a41d209d5
          PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
          
          String sqlCountRows = "select count(*) from roles where ";
          String sqlFetchRows = "select role,username from roles where ";
          
          String where = " username='" + username + "' ";
          
          if (StringUtils.isBlank(username)) {
              where = " 1=1 ";
          }
          
          try {
              return helper
                      .fetchPage(sqlCountRows + where, sqlFetchRows + where, new ArrayList<String>().toArray(), pageNo,
                              pageSize, ROLE_INFO_ROW_MAPPER);
          } catch (CannotGetJdbcConnectionException e) {
              LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
              throw e;
          }
  =======
          PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
          
          String sqlCountRows = "select count(*) from roles where ";
          String sqlFetchRows = "select role,username from roles where ";
          
          String where = " username= ? ";
          List<String> params = new ArrayList<>();
          if (StringUtils.isNotBlank(username)) {
              params = Collections.singletonList(username);
          } else {
              where = " 1=1 ";
          }
          
          try {
              return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
                      ROLE_INFO_ROW_MAPPER);
          } catch (CannotGetJdbcConnectionException e) {
              LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
              throw e;
          }
  >>>>>>> TEMP_RIGHT_BRANCH
3:69,76c
          org.springframework.data.domain.Page<RolesEntity> sPage = rolesRepository
                  .findAll(QRolesEntity.rolesEntity.username.eq(username), PageRequest.of(pageNo, pageSize));
          Page<RoleInfo> page = new Page<>();
          page.setPageNumber(sPage.getNumber());
          page.setPagesAvailable(sPage.getTotalPages());
          page.setPageItems(RoleInfoMapStruct.INSTANCE.convertRoleInfoList(sPage.getContent()));
          page.setTotalCount((int) sPage.getTotalElements());
          return page;
====1
1:110c
       * @param role role string value.
2:141c
3:82c
       * @param role     role string value.
====1
1:115,122c
          String sql = "INSERT into roles (role, username) VALUES (?, ?)";
          
          try {
              jt.update(sql, role, userName);
          } catch (CannotGetJdbcConnectionException e) {
              LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
              throw e;
          }
2:146c
3:87c
          rolesRepository.save(new RolesEntity(userName, role));
====1
1:131,137c
          String sql = "DELETE from roles WHERE role=?";
          try {
              jt.update(sql, role);
          } catch (CannotGetJdbcConnectionException e) {
              LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
              throw e;
          }
2:155,156c
3:96,97c
          Iterable<RolesEntity> iterable = rolesRepository.findAll(QRolesEntity.rolesEntity.role.eq(role));
          rolesRepository.deleteAll(iterable);
====1
1:143c
       * @param role role string value.
2:162c
3:103c
       * @param role     role string value.
====1
1:147,153c
          String sql = "DELETE from roles WHERE role=? and username=?";
          try {
              jt.update(sql, role, username);
          } catch (CannotGetJdbcConnectionException e) {
              LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
              throw e;
          }
2:166,168c
3:107,109c
          QRolesEntity qRoles = QRolesEntity.rolesEntity;
          rolesRepository.findOne(qRoles.role.eq(role).and(qRoles.username.eq(username)))
                  .ifPresent(s -> rolesRepository.delete(s));
====
1:158,160c
          String sql = "SELECT role FROM roles WHERE role like '%' ? '%'";
          List<String> users = this.jt.queryForList(sql, new String[]{role}, String.class);
          return users;
2:173,185c
  <<<<<<< HEAD
          List<RolesEntity> rolesEntities = (List<RolesEntity>) rolesRepository
                  .findAll(QRolesEntity.rolesEntity.role.like(role));
          return rolesEntities.stream().map(s -> s.getRole()).collect(Collectors.toList());
  ||||||| a41d209d5
          String sql = "SELECT role FROM roles WHERE role like '%' ? '%'";
          List<String> users = this.jt.queryForList(sql, new String[]{role}, String.class);
          return users;
  =======
          String sql = "SELECT role FROM roles WHERE role like '%' ? '%'";
          List<String> users = this.jt.queryForList(sql, new String[] {role}, String.class);
          return users;
  >>>>>>> TEMP_RIGHT_BRANCH
3:114,116c
          List<RolesEntity> rolesEntities = (List<RolesEntity>) rolesRepository
                  .findAll(QRolesEntity.rolesEntity.role.like(role));
          return rolesEntities.stream().map(s -> s.getRole()).collect(Collectors.toList());
====1
1:163,172c
      private static final class RoleInfoRowMapper implements RowMapper<RoleInfo> {
          
          @Override
          public RoleInfo mapRow(ResultSet rs, int rowNum) throws SQLException {
              RoleInfo roleInfo = new RoleInfo();
              roleInfo.setRole(rs.getString("role"));
              roleInfo.setUsername(rs.getString("username"));
              return roleInfo;
          }
      }
2:187a
3:118a
