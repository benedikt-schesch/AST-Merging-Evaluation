====1
1:19,39c
  import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO4BETA_ROW_MAPPER;
  import static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;
  import static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;
  
  import java.io.IOException;
  import java.util.ArrayList;
  import java.util.List;
  import java.util.concurrent.TimeUnit;
  import java.util.regex.Matcher;
  import java.util.regex.Pattern;
  
  import javax.sql.DataSource;
  
  import org.slf4j.Logger;
  import org.slf4j.LoggerFactory;
  import org.springframework.dao.DataAccessException;
  import org.springframework.jdbc.CannotGetJdbcConnectionException;
  import org.springframework.jdbc.core.JdbcTemplate;
  import org.springframework.jdbc.datasource.DataSourceTransactionManager;
  import org.springframework.transaction.support.TransactionTemplate;
  
2:18a
3:18a
====3
1:40a
2:19a
3:20c
  import com.alibaba.nacos.common.utils.IPUtil;
====2
1:43c
3:23c
  import com.alibaba.nacos.config.server.utils.ConfigExecutor;
2:21a
====3
1:45c
2:23c
  import com.alibaba.nacos.core.utils.ApplicationUtils;
3:25c
  import com.alibaba.nacos.sys.env.EnvUtil;
====
1:46a
2:25,42c
  import org.slf4j.Logger;
  import org.slf4j.LoggerFactory;
  import org.springframework.dao.DataAccessException;
  import org.springframework.jdbc.CannotGetJdbcConnectionException;
  import org.springframework.jdbc.core.JdbcTemplate;
  import org.springframework.jdbc.datasource.DataSourceTransactionManager;
  import org.springframework.transaction.support.TransactionTemplate;
  
  import javax.sql.DataSource;
  import java.io.IOException;
  import java.util.ArrayList;
  import java.util.List;
  import java.util.regex.Matcher;
  import java.util.regex.Pattern;
  
  import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO4BETA_ROW_MAPPER;
  import static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;
  import static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;
3:27,41c
  import org.springframework.dao.DataAccessException;
  import org.springframework.jdbc.CannotGetJdbcConnectionException;
  import org.springframework.jdbc.core.JdbcTemplate;
  import org.springframework.jdbc.datasource.DataSourceTransactionManager;
  import org.springframework.transaction.support.TransactionTemplate;
  
  import javax.sql.DataSource;
  import java.io.IOException;
  import java.util.ArrayList;
  import java.util.List;
  import java.util.concurrent.TimeUnit;
  
  import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO4BETA_ROW_MAPPER;
  import static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;
  import static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;
====3
1:55,58c
2:51,54c
      private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDataSourceServiceImpl.class);
      
      private static final String JDBC_DRIVER_NAME = "com.mysql.cj.jdbc.Driver";
      
3:49a
====3
1:86,87c
2:82,83c
      private static Pattern ipPattern = Pattern.compile("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");
      
3:76a
====1
1:120,122c
              
              ConfigExecutor.scheduleConfigTask(new SelectMasterTask(), 10, 10, TimeUnit.SECONDS);
              ConfigExecutor.scheduleConfigTask(new CheckDbHealthTask(), 10, 10, TimeUnit.SECONDS);
2:116,118c
3:109,111c
      
              //            ConfigExecutor.scheduleConfigTask(new SelectMasterTask(), 10, 10, TimeUnit.SECONDS);
              //            ConfigExecutor.scheduleConfigTask(new CheckDbHealthTask(), 10, 10, TimeUnit.SECONDS);
====3
1:130c
2:126c
                      .build(ApplicationUtils.getEnvironment(), (dataSource) -> {
3:119c
                      .build(EnvUtil.getEnvironment(), (dataSource) -> {
====3
1:193c
2:189c
                      return "DOWN:" + getIpFromUrl(dataSourceList.get(i).getJdbcUrl());
3:182c
                      return "DOWN:" + IPUtil.getIPFromString(dataSourceList.get(i).getJdbcUrl());
====3
1:196c
2:192c
                      return "WARN:" + getIpFromUrl(dataSourceList.get(i).getJdbcUrl());
3:185c
                      return "WARN:" + IPUtil.getIPFromString(dataSourceList.get(i).getJdbcUrl());
====3
1:204,217c
2:200,213c
      private String getIpFromUrl(String url) {
          
          Matcher m = ipPattern.matcher(url);
          if (m.find()) {
              return m.group();
          }
          
          return "";
      }
      
      static String defaultIfNull(String value, String defaultValue) {
          return null == value ? defaultValue : value;
      }
      
3:192a
====3
1:272c
2:268c
                                  getIpFromUrl(dataSourceList.get(i).getJdbcUrl()));
3:247c
                                  IPUtil.getIPFromString(dataSourceList.get(i).getJdbcUrl()));
====3
1:275c
2:271c
                                  getIpFromUrl(dataSourceList.get(i).getJdbcUrl()));
3:250c
                                  IPUtil.getIPFromString(dataSourceList.get(i).getJdbcUrl()));
