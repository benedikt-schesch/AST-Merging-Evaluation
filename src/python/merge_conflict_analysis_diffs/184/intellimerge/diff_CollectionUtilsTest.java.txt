====1
1:193a
2:194,198c
3:194,198c
      @Test(expected = NullPointerException.class)
      public void testGetCardinalityMapNull() {
          CollectionUtils.getCardinalityMap(null);
      }
  
====1
1:349a
2:355,377c
3:355,377c
      @Test(expected = NullPointerException.class)
      public void testContainsAnyNullColl1() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.containsAny(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testContainsAnyNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          final Collection<String> list2 = null;
          CollectionUtils.containsAny(list, list2);
      }
  
      @Test(expected = NullPointerException.class)
      public void testContainsAnyNullColl3() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          final String[] array = null;
          CollectionUtils.containsAny(list, array);
      }
  
====1
1:383a
2:412,433c
3:412,433c
      @Test(expected = NullPointerException.class)
      public void testContainsAnyInArrayNullColl1() {
          final String[] oneArr = {"1"};
          CollectionUtils.containsAny(null, oneArr);
      }
  
      @Test(expected = NullPointerException.class)
      public void testContainsAnyInArrayNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          final Collection<String> list2 = null;
          CollectionUtils.containsAny(list, list2);
      }
  
      @Test(expected = NullPointerException.class)
      public void testContainsAnyInArrayNullArray() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          final String[] array = null;
          CollectionUtils.containsAny(list, array);
      }
  
====1
1:402a
2:453,466c
3:453,466c
      @Test(expected = NullPointerException.class)
      public void testUnionNullColl1() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.union(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testUnionNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.union(list, null);
      }
  
====1
1:421a
2:486,499c
3:486,499c
      @Test(expected = NullPointerException.class)
      public void testIntersectionNullColl1() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.intersection(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testIntersectionNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.intersection(list, null);
      }
  
====1
1:440a
2:519,532c
3:519,532c
      @Test(expected = NullPointerException.class)
      public void testDisjunctionNullColl1() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.disjunction(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testDisjunctionNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.disjunction(list, null);
      }
  
====1
1:475a
2:568,581c
3:568,581c
      @Test(expected = NullPointerException.class)
      public void testSubtractNullColl1() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.subtract(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testSubtractNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.subtract(list, null);
      }
  
====1
1:541a
2:648,661c
3:648,661c
      @Test(expected = NullPointerException.class)
      public void testIsSubCollectionNullColl1() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.isSubCollection(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testIsSubCollectionNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.isSubCollection(list, null);
      }
  
====1
1:623a
2:744,789c
3:744,789c
      @Test(expected = NullPointerException.class)
      public void testIsEqualCollectionNullColl1() {
          final Collection<Integer> list = new ArrayList<>(1);
          list.add(1);
  
          final Equator<Integer> e = new Equator<Integer>() {
              @Override
              public boolean equate(final Integer o1, final Integer o2) {
                  if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) {
                      return false;
                  }
                  return true;
              }
  
              @Override
              public int hash(final Integer o) {
                  return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
              }
          };
  
          CollectionUtils.isEqualCollection(null, list, e);
      }
  
      @Test(expected = NullPointerException.class)
      public void testIsEqualCollectionNullColl2() {
          final Collection<Integer> list = new ArrayList<>(1);
          list.add(1);
  
          final Equator<Integer> e = new Equator<Integer>() {
              @Override
              public boolean equate(final Integer o1, final Integer o2) {
                  if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) {
                      return false;
                  }
                  return true;
              }
  
              @Override
              public int hash(final Integer o) {
                  return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
              }
          };
  
          CollectionUtils.isEqualCollection(list, null, e);
      }
  
====1
1:645a
2:812,825c
3:812,825c
      @Test(expected = NullPointerException.class)
      public void testIsProperSubCollectionNullColl1() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.isProperSubCollection(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testIsProperSubCollectionNullColl2() {
          final Collection<String> list = new ArrayList<>(1);
          list.add("1");
          CollectionUtils.isProperSubCollection(list, null);
      }
  
====1
1:655c
          assertNull(CollectionUtils.find(null,testPredicate));
2:835c
3:835c
          assertNull(CollectionUtils.find(null, testPredicate));
====1
1:1279c
      Transformer<Object, Integer> TRANSFORM_TO_INTEGER = input -> Integer.valueOf(((Long)input).intValue());
2:1459c
3:1459c
      Transformer<Object, Integer> TRANSFORM_TO_INTEGER = input -> Integer.valueOf(((Long) input).intValue());
====1
1:1331a
2:1512,1516c
3:1512,1516c
      @Test(expected = NullPointerException.class)
      public void testAddIgnoreNullNullColl() {
          CollectionUtils.addIgnoreNull(null, "1");
      }
  
====1
1:1338,1349c
          try {
              CollectionUtils.predicatedCollection(new ArrayList<Number>(), null);
              fail("Expecting NullPointerException for null predicate.");
          } catch (final NullPointerException ex) {
              // expected
          }
          try {
              CollectionUtils.predicatedCollection(null, predicate);
              fail("Expecting NullPointerException for null collection.");
          } catch (final NullPointerException ex) {
              // expected
          }
2:1523,1534c
3:1523,1534c
      }
  
      @Test(expected = NullPointerException.class)
      public void testPredicatedCollectionNullColl() {
          final Predicate<Object> predicate = PredicateUtils.instanceofPredicate(Integer.class);
          CollectionUtils.predicatedCollection(null, predicate);
      }
  
      @Test(expected = NullPointerException.class)
      public void testPredicatedCollectionNullPredicate() {
          final Collection<Integer> list = new ArrayList<>();
          CollectionUtils.predicatedCollection(list, null);
====1
1:1358,1362c
          try {
              CollectionUtils.isFull(null);
              fail();
          } catch (final NullPointerException ex) {
          }
2:1542a
3:1542a
====1
1:1372a
2:1553,1557c
3:1553,1557c
      @Test(expected = NullPointerException.class)
      public void testIsFullNullColl() {
          CollectionUtils.isFull(null);
      }
  
====1
1:1385,1389c
          try {
              CollectionUtils.maxSize(null);
              fail();
          } catch (final NullPointerException ex) {
          }
2:1569a
3:1569a
====1
1:1399a
2:1580,1584c
3:1580,1584c
      @Test(expected = NullPointerException.class)
      public void testMaxSizeNullColl() {
          CollectionUtils.maxSize(null);
      }
  
====1
1:1466a
2:1652c
3:1652c
      }
====1
1:1468,1472c
          try {
              CollectionUtils.retainAll(null, null);
              fail("expecting NullPointerException");
          } catch (final NullPointerException npe) {
          } // this is what we want
2:1654,1665c
3:1654,1665c
      @Test(expected = NullPointerException.class)
      public void testRetainAllNullBaseColl() {
          final List<Object> sub = new ArrayList<>();
          sub.add("A");
          CollectionUtils.retainAll(null, sub);
      }
  
      @Test(expected = NullPointerException.class)
      public void testRetainAllNullSubColl() {
          final List<String> base = new ArrayList<>();
          base.add("A");
          CollectionUtils.retainAll(base, null);
====1
1:1477c
          List<Integer> list = new ArrayList<>();
2:1670c
3:1670c
          final List<Integer> list = new ArrayList<>();
====1
1:1493c
      @Test(expected=IllegalArgumentException.class)
2:1686c
3:1686c
      @Test(expected=NullPointerException.class)
====
1:1495,1496c
          Collection<Integer> list = null;
          Collection result = CollectionUtils.removeRange(list, 0, 0);
2:1688,1697c
  <<<<<<< HEAD
          Collection<Integer> list = null;
          CollectionUtils.removeRange(list, 0, 0);
  ||||||| 4551c3df1
          Collection<Integer> list = null;
          Collection result = CollectionUtils.removeRange(list, 0, 0);
  =======
          final Collection<Integer> list = null;
          final Collection result = CollectionUtils.removeRange(list, 0, 0);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1688,1689c
          final Collection<Integer> list = null;
          CollectionUtils.removeRange(list, 0, 0);
====1
1:1501c
          Collection<Integer> list = new ArrayList<>();
2:1702c
3:1694c
          final Collection<Integer> list = new ArrayList<>();
====
1:1503c
          Collection result = CollectionUtils.removeRange(list, -1, 1);
2:1704,1710c
  <<<<<<< HEAD
          CollectionUtils.removeRange(list, -1, 1);
  ||||||| 4551c3df1
          Collection result = CollectionUtils.removeRange(list, -1, 1);
  =======
          final Collection result = CollectionUtils.removeRange(list, -1, 1);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1696c
          CollectionUtils.removeRange(list, -1, 1);
====1
1:1508c
          Collection<Integer> list = new ArrayList<>();
2:1715c
3:1701c
          final Collection<Integer> list = new ArrayList<>();
====
1:1510c
          Collection result = CollectionUtils.removeRange(list, 0, -1);
2:1717,1723c
  <<<<<<< HEAD
          CollectionUtils.removeRange(list, 0, -1);
  ||||||| 4551c3df1
          Collection result = CollectionUtils.removeRange(list, 0, -1);
  =======
          final Collection result = CollectionUtils.removeRange(list, 0, -1);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1703c
          CollectionUtils.removeRange(list, 0, -1);
====1
1:1515c
          Collection<Integer> list = new ArrayList<>();
2:1728c
3:1708c
          final Collection<Integer> list = new ArrayList<>();
====
1:1518c
          Collection result = CollectionUtils.removeRange(list, 1, 0);
2:1731,1737c
  <<<<<<< HEAD
          CollectionUtils.removeRange(list, 1, 0);
  ||||||| 4551c3df1
          Collection result = CollectionUtils.removeRange(list, 1, 0);
  =======
          final Collection result = CollectionUtils.removeRange(list, 1, 0);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1711c
          CollectionUtils.removeRange(list, 1, 0);
====1
1:1523c
          Collection<Integer> list = new ArrayList<>();
2:1742c
3:1716c
          final Collection<Integer> list = new ArrayList<>();
====
1:1525c
          Collection result = CollectionUtils.removeRange(list, 0, 2);
2:1744,1750c
  <<<<<<< HEAD
          CollectionUtils.removeRange(list, 0, 2);
  ||||||| 4551c3df1
          Collection result = CollectionUtils.removeRange(list, 0, 2);
  =======
          final Collection result = CollectionUtils.removeRange(list, 0, 2);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1718c
          CollectionUtils.removeRange(list, 0, 2);
====1
1:1530c
          List<Integer> list = new ArrayList<>();
2:1755c
3:1723c
          final List<Integer> list = new ArrayList<>();
====1
1:1559c
      @Test(expected=IllegalArgumentException.class)
2:1784c
3:1752c
      @Test(expected=NullPointerException.class)
====
1:1561,1562c
          Collection<Integer> list = null;
          Collection result = CollectionUtils.removeCount(list, 0, 1);
2:1786,1795c
  <<<<<<< HEAD
          Collection<Integer> list = null;
          CollectionUtils.removeCount(list, 0, 1);
  ||||||| 4551c3df1
          Collection<Integer> list = null;
          Collection result = CollectionUtils.removeCount(list, 0, 1);
  =======
          final Collection<Integer> list = null;
          final Collection result = CollectionUtils.removeCount(list, 0, 1);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1754,1755c
          final Collection<Integer> list = null;
          CollectionUtils.removeCount(list, 0, 1);
====
1:1567,1568c
          Collection<Integer> list = new ArrayList<>();
          Collection result = CollectionUtils.removeCount(list, -1, 1);
2:1800,1809c
  <<<<<<< HEAD
          Collection<Integer> list = new ArrayList<>();
          CollectionUtils.removeCount(list, -1, 1);
  ||||||| 4551c3df1
          Collection<Integer> list = new ArrayList<>();
          Collection result = CollectionUtils.removeCount(list, -1, 1);
  =======
          final Collection<Integer> list = new ArrayList<>();
          final Collection result = CollectionUtils.removeCount(list, -1, 1);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1760,1761c
          final Collection<Integer> list = new ArrayList<>();
          CollectionUtils.removeCount(list, -1, 1);
====
1:1573,1574c
          Collection<Integer> list = new ArrayList<>();
          Collection result = CollectionUtils.removeCount(list, 0, -1);
2:1814,1823c
  <<<<<<< HEAD
          Collection<Integer> list = new ArrayList<>();
          CollectionUtils.removeCount(list, 0, -1);
  ||||||| 4551c3df1
          Collection<Integer> list = new ArrayList<>();
          Collection result = CollectionUtils.removeCount(list, 0, -1);
  =======
          final Collection<Integer> list = new ArrayList<>();
          final Collection result = CollectionUtils.removeCount(list, 0, -1);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1766,1767c
          final Collection<Integer> list = new ArrayList<>();
          CollectionUtils.removeCount(list, 0, -1);
====1
1:1579c
          Collection<Integer> list = new ArrayList<>();
2:1828c
3:1772c
          final Collection<Integer> list = new ArrayList<>();
====
1:1581c
          Collection result = CollectionUtils.removeCount(list, 0, 2);
2:1830,1836c
  <<<<<<< HEAD
          CollectionUtils.removeCount(list, 0, 2);
  ||||||| 4551c3df1
          Collection result = CollectionUtils.removeCount(list, 0, 2);
  =======
          final Collection result = CollectionUtils.removeCount(list, 0, 2);
  >>>>>>> TEMP_RIGHT_BRANCH
3:1774c
          CollectionUtils.removeCount(list, 0, 2);
====1
1:1607a
2:1863c
3:1801c
      }
====1
1:1609,1613c
          try {
              CollectionUtils.removeAll(null, null);
              fail("expecting NullPointerException");
          } catch (final NullPointerException npe) {
          } // this is what we want
2:1865,1876c
3:1803,1814c
      @Test(expected = NullPointerException.class)
      public void testRemoveAllNullBaseColl() {
          final List<String> sub = new ArrayList<>();
          sub.add("A");
          CollectionUtils.removeAll(null, sub);
      }
  
      @Test(expected = NullPointerException.class)
      public void testRemoveAllNullSubColl() {
          final List<String> base = new ArrayList<>();
          base.add("A");
          CollectionUtils.removeAll(base, null);
====1
1:1622,1633c
          try {
              CollectionUtils.transformingCollection(new ArrayList<>(), null);
              fail("Expecting NullPointerException for null transformer.");
          } catch (final NullPointerException ex) {
              // expected
          }
          try {
              CollectionUtils.transformingCollection(null, transformer);
              fail("Expecting NullPointerException for null collection.");
          } catch (final NullPointerException ex) {
              // expected
          }
2:1885,1896c
3:1823,1834c
      }
  
      @Test(expected = NullPointerException.class)
      public void testTransformingCollectionNullColl() {
          final Transformer<Object, Object> transformer = TransformerUtils.nopTransformer();
          CollectionUtils.transformingCollection(null, transformer);
      }
  
      @Test(expected = NullPointerException.class)
      public void testTransformingCollectionNullTransformer() {
          final List<String> list = new ArrayList<>();
          CollectionUtils.transformingCollection(list, null);
====1
1:1740c
          CollectionUtils.addAll(collectionA, new Integer[]{5});
2:2003c
3:1941c
          CollectionUtils.addAll(collectionA, 5);
====
1:1744c
      @Test(expected=IndexOutOfBoundsException.class)
2:2007,2047c
  <<<<<<< HEAD
      @Test(expected = NullPointerException.class)
      public void testaddAllNullColl1() {
          final List<Integer> list = new ArrayList<>();
          CollectionUtils.addAll(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl2() {
          final List<Integer> list = new ArrayList<>();
          final Iterable<Integer> list2 = null;
          CollectionUtils.addAll(list, list2);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl3() {
          final List<Integer> list = new ArrayList<>();
          final Iterator<Integer> list2 = null;
          CollectionUtils.addAll(list, list2);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl4() {
          final List<Integer> list = new ArrayList<>();
          final Enumeration<Integer> enumArray = null;
          CollectionUtils.addAll(list, enumArray);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl5() {
          final List<Integer> list = new ArrayList<>();
          final Integer[] array = null;
          CollectionUtils.addAll(list, array);
      }
  
      @Test(expected=IndexOutOfBoundsException.class)
  ||||||| 4551c3df1
      @Test(expected=IndexOutOfBoundsException.class)
  =======
      @Test(expected = IndexOutOfBoundsException.class)
  >>>>>>> TEMP_RIGHT_BRANCH
3:1945,1979c
      @Test(expected = NullPointerException.class)
      public void testaddAllNullColl1() {
          final List<Integer> list = new ArrayList<>();
          CollectionUtils.addAll(null, list);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl2() {
          final List<Integer> list = new ArrayList<>();
          final Iterable<Integer> list2 = null;
          CollectionUtils.addAll(list, list2);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl3() {
          final List<Integer> list = new ArrayList<>();
          final Iterator<Integer> list2 = null;
          CollectionUtils.addAll(list, list2);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl4() {
          final List<Integer> list = new ArrayList<>();
          final Enumeration<Integer> enumArray = null;
          CollectionUtils.addAll(list, enumArray);
      }
  
      @Test(expected = NullPointerException.class)
      public void testAddAllNullColl5() {
          final List<Integer> list = new ArrayList<>();
          final Integer[] array = null;
          CollectionUtils.addAll(list, array);
      }
  
      @Test(expected = IndexOutOfBoundsException.class)
====1
1:1746c
          CollectionUtils.get((Object)collectionA, -3);
2:2049c
3:1981c
          CollectionUtils.get((Object) collectionA, -3);
====1
1:1749c
      @Test(expected=IndexOutOfBoundsException.class)
2:2052c
3:1984c
      @Test(expected = IndexOutOfBoundsException.class)
====1
1:1751c
          CollectionUtils.get((Object)collectionA.iterator(), 30);
2:2054c
3:1986c
          CollectionUtils.get((Object) collectionA.iterator(), 30);
====1
1:1754c
      @Test(expected=IllegalArgumentException.class)
2:2057c
3:1989c
      @Test(expected = IllegalArgumentException.class)
====1
1:1756c
          CollectionUtils.get((Object)null, 0);
2:2059c
3:1991c
          CollectionUtils.get((Object) null, 0);
====1
1:1761,1762c
          assertEquals(2, CollectionUtils.get((Object)collectionA, 2));
          assertEquals(2, CollectionUtils.get((Object)collectionA.iterator(), 2));
2:2064,2065c
3:1996,1997c
          assertEquals(2, CollectionUtils.get((Object) collectionA, 2));
          assertEquals(2, CollectionUtils.get((Object) collectionA.iterator(), 2));
====1
1:1764c
          assertEquals(map.entrySet().iterator().next(), CollectionUtils.get((Object)map, 0));
2:2067c
3:1999c
          assertEquals(map.entrySet().iterator().next(), CollectionUtils.get((Object) map, 0));
====1
1:1795a
2:2099,2103c
3:2031,2035c
      @Test(expected = NullPointerException.class)
      public void testReverseArrayNull() {
          CollectionUtils.reverseArray(null);
      }
  
====1
1:1828a
2:2137,2141c
3:2069,2073c
      public void collateException0() {
          CollectionUtils.collate(null, collectionC);
      }
  
      @Test(expected=NullPointerException.class)
