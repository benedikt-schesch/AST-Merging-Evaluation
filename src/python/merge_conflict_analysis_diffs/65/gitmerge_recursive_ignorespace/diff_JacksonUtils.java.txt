====1
1:18a
2:19,23c
3:19,23c
  import com.alibaba.nacos.api.exception.runtime.NacosDeserializationException;
  import com.alibaba.nacos.api.exception.runtime.NacosSerializationException;
  import com.fasterxml.jackson.annotation.JsonInclude.Include;
  import com.fasterxml.jackson.core.JsonProcessingException;
  import com.fasterxml.jackson.core.type.TypeReference;
====1
1:19a
2:25c
3:25c
  import com.fasterxml.jackson.databind.JsonNode;
====1
1:20a
2:27,29c
3:27,29c
  import com.fasterxml.jackson.databind.jsontype.NamedType;
  import com.fasterxml.jackson.databind.node.ArrayNode;
  import com.fasterxml.jackson.databind.node.ObjectNode;
====
1:21a
2:31,36c
  <<<<<<< HEAD
  import java.io.InputStream;
  ||||||| d4efcf4df
  =======
  import java.io.IOException;
  >>>>>>> TEMP_RIGHT_BRANCH
3:31,32c
  import java.io.InputStream;
  import java.io.IOException
====1
1:32a
2:48c
3:44c
  		mapper.setSerializationInclusion(Include.NON_NULL);
====
1:35,57c
  	public static String toJson(Object obj) throws Exception {
  		return mapper.writeValueAsString(obj);
  	}
  
  	public static byte[] toJsonBytes(Object obj) throws Exception {
  		return ByteUtils.toBytes(mapper.writeValueAsString(obj));
  	}
  
  	public static <T> T toObj(byte[] json, Class<T> cls) throws Exception {
  		return toObj(StringUtils.newString4UTF8(json), cls);
  	}
  
  	public static <T> T toObj(byte[] json, Type cls) throws Exception {
  		return toObj(StringUtils.newString4UTF8(json), cls);
  	}
  
  	public static <T> T toObj(String json, Class<T> cls) throws Exception {
  		return mapper.readValue(json, cls);
  	}
  
  	public static <T> T toObj(String json, Type type) throws Exception {
  		return mapper.readValue(json, mapper.constructType(type));
  	}
2:51,147c
  	public static String toJson(Object obj) {
          try {
  		return mapper.writeValueAsString(obj);
          } catch (JsonProcessingException e) {
              throw new NacosSerializationException(obj.getClass(), e);
          }
  	}
  
  	public static byte[] toJsonBytes(Object obj) {
          try {
  		return ByteUtils.toBytes(mapper.writeValueAsString(obj));
          } catch (JsonProcessingException e) {
              throw new NacosSerializationException(obj.getClass(), e);
          }
  	}
  
  	public static <T> T toObj(byte[] json, Class<T> cls) {
          try {
  		return toObj(StringUtils.newString4UTF8(json), cls);
          } catch (Exception e) {
              throw new NacosDeserializationException(cls, e);
          }
  	}
  
  	public static <T> T toObj(byte[] json, Type cls) {
          try {
  		return toObj(StringUtils.newString4UTF8(json), cls);
          } catch (Exception e) {
              throw new NacosDeserializationException(e);
          }
      }
  
      public static <T> T toObj(byte[] json, TypeReference<T> typeReference) {
          try {
              return toObj(StringUtils.newString4UTF8(json), typeReference);
          } catch (Exception e) {
              throw new NacosDeserializationException(e);
          }
  	}
  
  <<<<<<< HEAD
  	public static <T> T toObj(InputStream inputStream, Class<T> tClass) throws Exception {
  	    return mapper.readValue(inputStream, tClass);
      }
  
  	public static <T> T toObj(String json, Class<T> cls) throws Exception {
  ||||||| d4efcf4df
  	public static <T> T toObj(String json, Class<T> cls) throws Exception {
  =======
  	public static <T> T toObj(String json, Class<T> cls) {
          try {
  >>>>>>> TEMP_RIGHT_BRANCH
  		return mapper.readValue(json, cls);
          } catch (IOException e) {
              throw new NacosDeserializationException(cls, e);
          }
  	}
  
  	public static <T> T toObj(String json, Type type) {
          try {
  		return mapper.readValue(json, mapper.constructType(type));
          } catch (IOException e) {
              throw new NacosDeserializationException(e);
          }
      }
  
      public static <T> T toObj(String json, TypeReference<T> typeReference) {
          try {
              return mapper.readValue(json, typeReference);
          } catch (IOException e) {
              throw new NacosDeserializationException(typeReference.getClass(), e);
          }
      }
  
      public static JsonNode toObj(String json) {
          try {
              return mapper.readTree(json);
          } catch (IOException e) {
              throw new NacosDeserializationException(e);
          }
      }
  
  	public static void registerSubtype(Class<?> clz, String type) {
  	    mapper.registerSubtypes(new NamedType(clz, type));
      }
  
      public static ObjectNode createEmptyJsonNode() {
  	    return new ObjectNode(mapper.getNodeFactory());
      }
  
      public static ArrayNode createEmptyArrayNode() {
  	    return new ArrayNode(mapper.getNodeFactory());
      }
  
      public static JsonNode transferToJsonNode(Object obj) {
  	    return mapper.valueToTree(obj);
  	}
3:47,142c
  	public static String toJson(Object obj) {
          try {
              return mapper.writeValueAsString(obj);
          } catch (JsonProcessingException e) {
              throw new NacosSerializationException(obj.getClass(), e);
          }
      }
  
  	public static byte[] toJsonBytes(Object obj) {
          try {
              return ByteUtils.toBytes(mapper.writeValueAsString(obj));
          } catch (JsonProcessingException e) {
              throw new NacosSerializationException(obj.getClass(), e);
          }
      }
  
  	public static <T> T toObj(byte[] json, Class<T> cls) {
          try {
              return toObj(StringUtils.newString4UTF8(json), cls);
          } catch (Exception e) {
              throw new NacosDeserializationException(cls, e);
          }
      }
  
  	public static <T> T toObj(byte[] json, Type cls) {
          try {
              return toObj(StringUtils.newString4UTF8(json), cls);
          } catch (Exception e) {
              throw new NacosDeserializationException(e);
          }
      }
  
  
  	public static <T> T toObj(InputStream inputStream, Class<T> tClass) throws Exception {
  	    return mapper.readValue(inputStream, tClass);
      }
  
  	public static <T> T toObj(String json, Class<T> cls) throws Exception {
  		return mapper.readValue(json, cls);
  	  }
  
    public static <T> T toObj(byte[] json, TypeReference<T> typeReference) {
          try {
              return toObj(StringUtils.newString4UTF8(json), typeReference);
          } catch (Exception e) {
              throw new NacosDeserializationException(e);
          }
      }
  
  	public static <T> T toObj(String json, Class<T> cls) {
          try {
              return mapper.readValue(json, cls);
          } catch (IOException e) {
              throw new NacosDeserializationException(cls, e);
          }
      }
  
  	public static <T> T toObj(String json, Type type) {
          try {
              return mapper.readValue(json, mapper.constructType(type));
          } catch (IOException e) {
              throw new NacosDeserializationException(e);
          }
      }
  
      public static <T> T toObj(String json, TypeReference<T> typeReference) {
          try {
              return mapper.readValue(json, typeReference);
          } catch (IOException e) {
              throw new NacosDeserializationException(typeReference.getClass(), e);
          }
      }
  
      public static JsonNode toObj(String json) {
          try {
              return mapper.readTree(json);
          } catch (IOException e) {
              throw new NacosDeserializationException(e);
          }
      }
  
  	public static void registerSubtype(Class<?> clz, String type) {
  	    mapper.registerSubtypes(new NamedType(clz, type));
      }
  
      public static ObjectNode createEmptyJsonNode() {
  	    return new ObjectNode(mapper.getNodeFactory());
      }
  
      public static ArrayNode createEmptyArrayNode() {
  	    return new ArrayNode(mapper.getNodeFactory());
      }
  
      public static JsonNode transferToJsonNode(Object obj) {
  	    return mapper.valueToTree(obj);
      }
