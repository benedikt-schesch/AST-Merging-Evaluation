<project name="JSCover" basedir="." default="pre-commit">

	<property environment="env" />

	<property file="build.properties" />
	<property file="src/main/resources/jscover/configuration.properties" />

    <!-- Initialize Maven task. Allows Java dependencies to be managed in pom.xml -->
    <target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
                 classpath="lib/maven-ant-tasks.jar"/>
        <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
            <isset property="maven.repo.local"/>
        </condition>
        <echo>maven.repo.local=${maven.repo.local}</echo>
        <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
        <artifact:pom file="pom.xml" id="maven.project"/>
        <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
        <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
        <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
        <taskdef classpathref="test.classpath" resource="tasks.properties" />
    </target>

	<path id="classpath-main">
		<pathelement path="${classes.main.dir}" />
		<pathelement path="${classes.test-unit.dir}" />
		<pathelement path="${classes.test-integration.dir}" />
		<pathelement path="${classes.test-acceptance.dir}" />
	</path>

	<path id="classpath-cobertura">
		<pathelement path="${classes.instrumented.dir}" />
		<pathelement path="${classes.main.dir}" />
		<pathelement path="${classes.test-unit.dir}" />
		<pathelement path="${classes.test-integration.dir}" />
		<pathelement path="${classes.test-acceptance.dir}" />
	</path>

	<target name="clean">
		<delete dir="target" />
		<delete file="cobertura.ser" />
	</target>

	<target name="init" depends="mvn-init"/>

	<target name="dirsetup">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/reports" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${report.test.dir}" />
		<mkdir dir="${report.spec.dir}" />
		<mkdir dir="${report.checkstyle.dir}" />
		<mkdir dir="${report.coverage.dir}" />
		<mkdir dir="${report.coverage.all.dir}" />
		<mkdir dir="${report.jscoverage.dir}" />
		<mkdir dir="${classes.main.dir}" />
		<mkdir dir="${classes.instrumented.dir}" />
		<mkdir dir="${classes.test-unit.dir}" />
		<mkdir dir="${classes.test-integration.dir}" />
		<mkdir dir="${classes.test-acceptance.dir}" />
	</target>

	<target name="compile" depends="init, dirsetup">
		<javac includeantruntime="false" debug="true" srcdir="${src.main.dir}" destdir="${classes.main.dir}"
               classpathref="compile.classpath" source="1.5" target="1.5"/>
		<copy todir="${classes.main.dir}" includeemptydirs="no">
			<fileset dir="${src.resources.dir}" />
		</copy>
	</target>

    <target name="stop-server">
        <get src="http://localhost:8080/stop" dest="${build.dir}/stop.txt" verbose="true"/>
	</target>

    <target name="jar" depends="compile">
        <copy file="lib/runtime/js.jar" todir="${dist.dir}"/>
        <jar jarfile="${dist.dir}/${ant.project.name}.jar" basedir="${classes.main.dir}" compress="true">
            <manifest>
                <attribute name="Implementation-Title" value="${ant.project.name}"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Main-Class" value="jscover.Main"/>
                <attribute name="Class-Path" value="js.jar"/><!--Add required JARs here-->
            </manifest>
        </jar>
    </target>

    <target name="jar-all" depends="compile">
        <property name="tmpDir" value="${build.dir}/tmp"/>
        <mkdir dir="${tmpDir}"/>
        <unzip src="lib/runtime/js.jar" dest="${tmpDir}"/>
        <move file="${tmpDir}/LICENSE.txt" tofile="${tmpDir}/META-INF/LICENSE-mozilla.txt"/>
        <copy todir="${tmpDir}" includeemptydirs="no">
            <fileset dir="${classes.main.dir}" />
        </copy>
        <jar jarfile="${dist.dir}/${ant.project.name}-all.jar" basedir="${tmpDir}" compress="true">
            <manifest>
                <attribute name="Implementation-Title" value="${ant.project.name}"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Main-Class" value="jscover.Main"/>
            </manifest>
        </jar>
    </target>

    <target name="zip">
        <zip destfile="${dist.dir}/${ant.project.name}-${version}.zip">
            <fileset dir="${basedir}">
                <include name="**/*"/>
                <exclude name=".gradle/**"/>
                <exclude name=".settings/**"/>
                <exclude name="*.log"/>
                <exclude name="*.lck"/>
                <exclude name="cobertura.ser"/>
                <exclude name="junit*"/>
                <exclude name="bin/**"/>
                <exclude name="build/**"/>
                <exclude name="${build.dir}/**"/>
            </fileset>
            <fileset dir="${basedir}">
                <include name="${dist.dir}/*.jar"/>
                <exclude name="${dist.dir}/*-bundle.jar"/>
            </fileset>
        </zip>
    </target>

    <target name="release" depends="pre-commit, jar-test, jar-all-test, zip" description="Build sourceforge release binary"/>

    <target name="maven-files" depends="jar-all" description="Maven Step 1 - Create files to be signed">
        <property name="mavenBundleDir" value="${build.dir}/mavenBundle"/>
        <mkdir dir="${mavenBundleDir}/javadoc"/>
        <copy file="pom.xml" tofile="${mavenBundleDir}/${ant.project.name}-${version}.pom"/>
        <copy file="${dist.dir}/${ant.project.name}-all.jar" tofile="${mavenBundleDir}/${ant.project.name}-${version}.jar"/>
        <jar jarfile="${mavenBundleDir}/${ant.project.name}-${version}-sources.jar" basedir="${src.main.dir}" compress="false"/>
        <javadoc destdir="${mavenBundleDir}/javadoc"
                version="true"
                use="true"
                windowtitle="${ant.project.name} API">
            <classpath refid="compile.classpath"/>
            <packageset dir="${src.main.dir}" defaultexcludes="yes">
                <include name="jscover/**"/>
            </packageset>

            <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
        </javadoc>
        <jar jarfile="${mavenBundleDir}/${ant.project.name}-${version}-javadoc.jar" basedir="${mavenBundleDir}/javadoc" compress="false"/>
        <delete dir="${mavenBundleDir}/javadoc"/>
        <!-- Automate signing -->
   </target>

    <target name="maven-bundle" description="Maven Step 2 - Bundle files after saving">
        <!-- Add dependency when signing automated -->
        <property name="mavenBundleDir" value="${build.dir}/mavenBundle"/>
        <jar jarfile="${dist.dir}/${ant.project.name}-${version}-bundle.jar" basedir="${mavenBundleDir}" compress="true"/>
    </target>

    <target name="cobertura-setup" depends="compile">
		<delete file="cobertura.ser" failonerror="false" />
		<cobertura-instrument todir="${classes.instrumented.dir}">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${classes.main.dir}">
				<include name="**/*.class" />
				<exclude name="jscover/MainHelper.class" />
                <exclude name="**/SimpleWebServer.class" />
			</fileset>
			<classpath>
				<path refid="classpath-cobertura" />
			</classpath>
		</cobertura-instrument>
		<copy todir="${classes.instrumented.dir}" includeemptydirs="no">
			<fileset dir="${src.resources.dir}" />
			<fileset dir="${src.test-integration.resources.dir}" />
		</copy>
	</target>

	<target name="coverage-report" depends="init">
		<cobertura-report format="html" destdir="${report.coverage.dir}" srcdir="${src.main.dir}" />
	</target>

	<target name="coverage-report-all" depends="init">
		<cobertura-report format="html" destdir="${report.coverage.all.dir}" srcdir="${src.main.dir}" />
	</target>

	<target name="coverage-check">
		<cobertura-check totallinerate="88" totalbranchrate="89"/>
	</target>

	<target name="coverage-check-all">
		<cobertura-check totallinerate="97" totalbranchrate="94"/>
	</target>

	<target name="compile-tests" depends="compile">
		<javac includeantruntime="false" debug="true" srcdir="${src.test-unit.dir}"
			destdir="${classes.test-unit.dir}" source="1.5" target="1.5">
            <classpath>
                <path refid="classpath-main" />
                <path refid="compile.classpath" />
                <path refid="test.classpath" />
            </classpath>
        </javac>
		<copy todir="${classes.test-unit.dir}" includeemptydirs="no">
			<fileset dir="${src.test-resources.dir}" />
		</copy>
	</target>

	<target name="compile-integration-tests" depends="compile-tests">
		<javac includeantruntime="false" debug="true" srcdir="${src.test-integration.dir}"
			destdir="${classes.test-integration.dir}" source="1.5" target="1.5">
            <classpath>
                <path refid="classpath-main" />
                <path refid="compile.classpath" />
                <path refid="test.classpath" />
            </classpath>
        </javac>
		<copy todir="${classes.test-integration.dir}" includeemptydirs="no">
			<fileset dir="${src.test-integration.resources.dir}" />
		</copy>
	</target>

	<target name="compile-acceptance-tests" depends="compile-integration-tests">
		<javac includeantruntime="false" debug="true" srcdir="${src.test-acceptance.dir}"
			destdir="${classes.test-acceptance.dir}" source="1.5" target="1.5">
            <classpath>
                <path refid="classpath-main" />
                <path refid="compile.classpath" />
                <path refid="test.classpath" />
            </classpath>
        </javac>
		<copy todir="${classes.test-acceptance.dir}" includeemptydirs="no">
			<fileset dir="${src.test-acceptance.resources.dir}" />
		</copy>
	</target>

	<target name="run-tests" depends="compile-integration-tests, cobertura-setup">
		<property name="tests" value="*Test" />
		<delete dir="${report.test.dir}" />
		<mkdir dir="${report.test.dir}" />
		<junit forkmode="perBatch" haltonfailure="no" haltonerror="no" failureProperty="test.failure" errorproperty="test.failure">
            <jvmarg value="-ea"/>
			<classpath>
				<path refid="classpath-cobertura" />
                <path refid="compile.classpath" />
                <path refid="test.classpath" />
			</classpath>
			<formatter type="xml" />
			<formatter type="brief" usefile="no" />
			<batchtest fork="yes" todir="${report.test.dir}">
				<fileset dir="${classes.test-unit.dir}">
					<include name="**/${tests}.class" />
				</fileset>
				<fileset dir="${classes.test-integration.dir}">
					<include name="**/${tests}.class" />
				</fileset>
			</batchtest>
		</junit>
        <antcall target="report-if-failed"/>
		<fail if="test.failure"/>
	</target>

    <target name="run-acceptance-tests" depends="compile-acceptance-tests">
        <property name="tests" value="*Test" />
        <junit forkmode="perTest" haltonfailure="no" haltonerror="no" failureProperty="test.failure" errorproperty="test.failure">
            <jvmarg value="-ea"/>
            <classpath>
                <path refid="classpath-cobertura" />
                <path refid="compile.classpath" />
                <path refid="test.classpath" />
            </classpath>
            <formatter type="xml" />
            <formatter type="brief" usefile="no" />
            <batchtest fork="yes" todir="${report.test.dir}">
                <fileset dir="${classes.test-acceptance.dir}">
                    <include name="**/${tests}.class" />
                </fileset>
            </batchtest>
        </junit>
        <antcall target="report-if-failed"/>
        <fail if="test.failure"/>
    </target>

    <target name="jar-test" depends="jar">
        <java jar="${dist.dir}/${ant.project.name}.jar" fork="true" spawn="true">
            <arg line="-ws --port=9080"/>
        </java>
        <get maxtime="2" src="http://localhost:9080/stop" dest="${build.dir}/stop.txt"/>
    </target>

    <target name="jar-all-test" depends="jar-all">
        <java jar="${dist.dir}/${ant.project.name}-all.jar" fork="true" spawn="true">
            <arg line="-ws --port=9080"/>
        </java>
        <get maxtime="2" src="http://localhost:9080/stop" dest="${build.dir}/stop.txt"/>
    </target>

    <target name="report-if-failed" if="test.failure">
        <antcall target="junit-report"/>
	</target>

    <target name="junit-report">
		<junitreport todir="${report.test.dir}">
			<fileset dir="${report.test.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.test.dir}" />
		</junitreport>
	</target>

	<target name="junit" depends="run-tests, coverage-report, coverage-check"/>

	<target name="pre-commit" depends="clean, junit, run-acceptance-tests, junit-report, coverage-report-all, coverage-check-all" description="Run this before committing"/>
</project>
