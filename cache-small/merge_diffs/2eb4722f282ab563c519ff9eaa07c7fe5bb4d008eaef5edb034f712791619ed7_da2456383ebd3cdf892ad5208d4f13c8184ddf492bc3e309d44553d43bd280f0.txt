diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/config .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/config
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/config	2023-08-14 14:19:42.654621952 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/config	2023-08-14 14:25:41.135712404 +0200
@@ -9,3 +9,6 @@
 [branch "master"]
 	remote = origin
 	merge = refs/heads/master
+[merge "spork"]
+    name = spork
+    driver = java -jar /home/scheschb/Git/AST-Merging-Evaluation/jars/spork.jar --git-mode %A %O %B -o %A
Binary files .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/index and .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/index differ
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/logs/HEAD .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/logs/HEAD
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/logs/HEAD	2023-08-14 14:25:32.235785310 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/logs/HEAD	2023-08-14 14:25:59.055565527 +0200
@@ -1,7 +1,7 @@
 0000000000000000000000000000000000000000 b8f0a18cad11ed6172e1c7e18b6d78f07fe4fabf Benedikt Schesch <b.schesch@gmail.com> 1692015582 +0200	clone: from https://github.com/mangstadt/ez-vcard.git
-b8f0a18cad11ed6172e1c7e18b6d78f07fe4fabf ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015930 +0200	checkout: moving from master to ea6026ee62cc184db68d841d50d58474fcdf4862
-ea6026ee62cc184db68d841d50d58474fcdf4862 ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015931 +0200	checkout: moving from ea6026ee62cc184db68d841d50d58474fcdf4862 to ___MERGE_TESTER_LEFT
-ea6026ee62cc184db68d841d50d58474fcdf4862 ab2032ca9769d452d4906f51cf56ca7d983a27c4 Benedikt Schesch <b.schesch@gmail.com> 1692015931 +0200	checkout: moving from ___MERGE_TESTER_LEFT to ab2032ca9769d452d4906f51cf56ca7d983a27c4
-ab2032ca9769d452d4906f51cf56ca7d983a27c4 ab2032ca9769d452d4906f51cf56ca7d983a27c4 Benedikt Schesch <b.schesch@gmail.com> 1692015932 +0200	checkout: moving from ab2032ca9769d452d4906f51cf56ca7d983a27c4 to ___MERGE_TESTER_RIGHT
-ab2032ca9769d452d4906f51cf56ca7d983a27c4 ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015932 +0200	checkout: moving from ___MERGE_TESTER_RIGHT to ___MERGE_TESTER_LEFT
-ea6026ee62cc184db68d841d50d58474fcdf4862 50fa8266059ca926a40c86e21bc6c588157d6042 Benedikt Schesch <b.schesch@gmail.com> 1692015932 +0200	merge ___MERGE_TESTER_RIGHT: Merge made by the 'ort' strategy.
+b8f0a18cad11ed6172e1c7e18b6d78f07fe4fabf ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015939 +0200	checkout: moving from master to ea6026ee62cc184db68d841d50d58474fcdf4862
+ea6026ee62cc184db68d841d50d58474fcdf4862 ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015940 +0200	checkout: moving from ea6026ee62cc184db68d841d50d58474fcdf4862 to ___MERGE_TESTER_LEFT
+ea6026ee62cc184db68d841d50d58474fcdf4862 ab2032ca9769d452d4906f51cf56ca7d983a27c4 Benedikt Schesch <b.schesch@gmail.com> 1692015940 +0200	checkout: moving from ___MERGE_TESTER_LEFT to ab2032ca9769d452d4906f51cf56ca7d983a27c4
+ab2032ca9769d452d4906f51cf56ca7d983a27c4 ab2032ca9769d452d4906f51cf56ca7d983a27c4 Benedikt Schesch <b.schesch@gmail.com> 1692015941 +0200	checkout: moving from ab2032ca9769d452d4906f51cf56ca7d983a27c4 to ___MERGE_TESTER_RIGHT
+ab2032ca9769d452d4906f51cf56ca7d983a27c4 ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015941 +0200	checkout: moving from ___MERGE_TESTER_RIGHT to ___MERGE_TESTER_LEFT
+ea6026ee62cc184db68d841d50d58474fcdf4862 dcd79b9a3a83f909fbb76674045d4cdfa8fed5d6 Benedikt Schesch <b.schesch@gmail.com> 1692015941 +0200	merge ___MERGE_TESTER_RIGHT: Merge made by the 'ort' strategy.
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_LEFT .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_LEFT
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_LEFT	2023-08-14 14:25:32.235785310 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_LEFT	2023-08-14 14:25:59.055565527 +0200
@@ -1,2 +1,2 @@
-0000000000000000000000000000000000000000 ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015931 +0200	branch: Created from HEAD
-ea6026ee62cc184db68d841d50d58474fcdf4862 50fa8266059ca926a40c86e21bc6c588157d6042 Benedikt Schesch <b.schesch@gmail.com> 1692015932 +0200	merge ___MERGE_TESTER_RIGHT: Merge made by the 'ort' strategy.
+0000000000000000000000000000000000000000 ea6026ee62cc184db68d841d50d58474fcdf4862 Benedikt Schesch <b.schesch@gmail.com> 1692015940 +0200	branch: Created from HEAD
+ea6026ee62cc184db68d841d50d58474fcdf4862 dcd79b9a3a83f909fbb76674045d4cdfa8fed5d6 Benedikt Schesch <b.schesch@gmail.com> 1692015941 +0200	merge ___MERGE_TESTER_RIGHT: Merge made by the 'ort' strategy.
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_RIGHT .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_RIGHT
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_RIGHT	2023-08-14 14:25:32.179785769 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/logs/refs/heads/___MERGE_TESTER_RIGHT	2023-08-14 14:25:41.119712534 +0200
@@ -1 +1 @@
-0000000000000000000000000000000000000000 ab2032ca9769d452d4906f51cf56ca7d983a27c4 Benedikt Schesch <b.schesch@gmail.com> 1692015932 +0200	branch: Created from HEAD
+0000000000000000000000000000000000000000 ab2032ca9769d452d4906f51cf56ca7d983a27c4 Benedikt Schesch <b.schesch@gmail.com> 1692015941 +0200	branch: Created from HEAD
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 02
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 0e
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 1c
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 32
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 48
Only in .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/objects: 50
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 66
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 6e
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 70
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 75
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 76
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 88
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: 93
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: af
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: b2
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: b3
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: c6
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: cb
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: d8
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: dc
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: e4
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/objects: e7
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/refs/heads/___MERGE_TESTER_LEFT .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/refs/heads/___MERGE_TESTER_LEFT
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/.git/refs/heads/___MERGE_TESTER_LEFT	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/.git/refs/heads/___MERGE_TESTER_LEFT	2023-08-14 14:25:59.055565527 +0200
@@ -1 +1 @@
-50fa8266059ca926a40c86e21bc6c588157d6042
+dcd79b9a3a83f909fbb76674045d4cdfa8fed5d6
Only in .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard: .gitattributes
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardParseException.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardParseException.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardParseException.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardParseException.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,40 +1,37 @@
 package ezvcard.io.json;
 
+import com.fasterxml.jackson.core.JsonToken;
+import ezvcard.Messages;
 import java.io.IOException;
 
-import com.fasterxml.jackson.core.JsonToken;
 
-import ezvcard.Messages;
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
- The views and conclusions contained in the software and documentation are those
- of the authors and should not be interpreted as representing official policies, 
- either expressed or implied, of the FreeBSD Project.
- */
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
 
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies, 
+either expressed or implied, of the FreeBSD Project.
+ */
 /**
  * Thrown during the parsing of a jCard, when a jCard is not formatted in the
  * correct way (the JSON syntax is valid, but it's not in the correct jCard
@@ -43,7 +40,10 @@
  */
 public class JCardParseException extends IOException {
 	private static final long serialVersionUID = 5139480815617303404L;
-	private final JsonToken expected, actual;
+
+	private final JsonToken expected;
+
+	private final JsonToken actual;
 
 	/**
 	 * Creates a jCard parse exception.
@@ -58,9 +58,13 @@
 
 	/**
 	 * Creates a jCard parse exception.
-	 * @param message the detail message
-	 * @param expected the JSON token that the parser was expecting
-	 * @param actual the actual JSON token
+	 *
+	 * @param message
+	 * 		the detail message
+	 * @param expected
+	 * 		the JSON token that the parser was expecting
+	 * @param actual
+	 * 		the actual JSON token
 	 */
 	public JCardParseException(String message, JsonToken expected, JsonToken actual) {
 		super(message);
@@ -83,4 +87,4 @@
 	public JsonToken getActualToken() {
 		return actual;
 	}
-}
+}
\ No newline at end of file
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardRawReader.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardRawReader.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardRawReader.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardRawReader.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,5 +1,11 @@
 package ezvcard.io.json;
 
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParseException;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import ezvcard.VCardDataType;
+import ezvcard.parameter.VCardParameters;
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.Reader;
@@ -8,67 +14,65 @@
 import java.util.List;
 import java.util.Map;
 
-import com.fasterxml.jackson.core.JsonFactory;
-import com.fasterxml.jackson.core.JsonParseException;
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonToken;
 
-import ezvcard.VCardDataType;
-import ezvcard.parameter.VCardParameters;
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
 
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
 /**
  * Parses an vCard JSON data stream (jCard).
- * 
  * @author Michael Angstadt
  * @see <a href="http://tools.ietf.org/html/rfc7095">RFC 7095</a>
  */
 public class JCardRawReader implements Closeable {
 	private final Reader reader;
+
 	private JsonParser parser;
+
 	private boolean eof = false;
+
 	private JCardDataStreamListener listener;
+
 	private boolean strict = false;
 
 	/**
+	 *
+	 *
 	 * @param reader
-	 *            the reader to wrap
+	 * 		the reader to wrap
 	 */
 	public JCardRawReader(Reader reader) {
 		this.reader = reader;
 	}
 
 	/**
+	 *
+	 *
 	 * @param parser
-	 *            the parser to read from
+	 * 		the parser to read from
 	 * @param strict
-	 *            ensure that the parser is pointing to the first token of a
-	 *            valid jcard at the start of parsing, and that parsing consumes
-	 *            the final token of that jcard before returning
+	 * 		ensure that the parser is pointing to the first token of a
+	 * 		valid jcard at the start of parsing, and that parsing consumes
+	 * 		the final token of that jcard before returning
 	 */
 	public JCardRawReader(JsonParser parser, boolean strict) {
 		reader = null;
@@ -78,7 +82,6 @@
 
 	/**
 	 * Gets the current line number.
-	 * 
 	 * @return the line number
 	 */
 	public int getLineNum() {
@@ -87,16 +90,11 @@
 
 	/**
 	 * Reads the next vCard from the jCard data stream.
-	 * 
-	 * @param listener
-	 *            handles the vCard data as it is read off the wire
-	 * @throws JCardParseException
-	 *             if the jCard syntax is incorrect (the JSON syntax may be
-	 *             valid, but it is not in the correct jCard format).
-	 * @throws JsonParseException
-	 *             if the JSON syntax is incorrect
-	 * @throws IOException
-	 *             if there is a problem reading from the data stream
+	 * @param listener handles the vCard data as it is read off the wire
+	 * @throws JCardParseException if the jCard syntax is incorrect (the JSON
+	 * syntax may be valid, but it is not in the correct jCard format).
+	 * @throws JsonParseException if the JSON syntax is incorrect
+	 * @throws IOException if there is a problem reading from the data stream
 	 */
 	public void readNext(JCardDataStreamListener listener) throws IOException {
 		if (parser == null) {
@@ -105,15 +103,12 @@
 		} else if (parser.isClosed()) {
 			return;
 		}
-
 		this.listener = listener;
-
-		// find the next vCard object
+		//find the next vCard object
 		JsonToken prev = parser.getCurrentToken();
 		JsonToken cur;
 		while ((cur = parser.nextToken()) != null) {
-			if (prev == JsonToken.START_ARRAY && cur == JsonToken.VALUE_STRING
-					&& "vcard".equals(parser.getValueAsString())) {
+			if (((prev == JsonToken.START_ARRAY) && (cur == JsonToken.VALUE_STRING)) && "vcard".equals(parser.getValueAsString())) {
 				break;
 			} else if (strict) {
 				if (prev != JsonToken.START_ARRAY) {
@@ -121,56 +116,53 @@
 				} else if (cur != JsonToken.VALUE_STRING) {
 					throw new JCardParseException(JsonToken.VALUE_STRING, cur);
 				} else {
-					throw new JCardParseException("Invalid value for first token: expected \"vcard\" , was \""
-							+ parser.getValueAsString() + "\"", JsonToken.VALUE_STRING, cur);
+					throw new JCardParseException(("Invalid value for first token: expected \"vcard\" , was \"" + parser.getValueAsString()) + "\"", JsonToken.VALUE_STRING, cur);
 				}
 			}
 			prev = cur;
-		}
+		} 
 		if (cur == null) {
 			// EOF
 			eof = true;
 			return;
 		}
-
 		listener.beginVCard();
 		parseProperties();
-
 		check(JsonToken.END_ARRAY, parser.nextToken());
 	}
 
 	private void parseProperties() throws IOException {
 		// start properties array
 		checkNext(JsonToken.START_ARRAY);
-
-		// read properties
-		while (parser.nextToken() != JsonToken.END_ARRAY) { // until we reach
+		//read properties
+		while (parser.nextToken() != JsonToken.END_ARRAY) {
+		// until we reach
 															// the end
-															// properties array
+			// properties array
 			checkCurrent(JsonToken.START_ARRAY);
 			parser.nextToken();
 			parseProperty();
-		}
+		} 
 	}
 
 	private void parseProperty() throws IOException {
-		// get property name
+		//get property name
 		checkCurrent(JsonToken.VALUE_STRING);
 		String propertyName = parser.getValueAsString().toLowerCase();
 
-		// get parameters
+		//get parameters
 		VCardParameters parameters = parseParameters();
 
-		// get group
+		//get group
 		List<String> removed = parameters.removeAll("group");
 		String group = removed.isEmpty() ? null : removed.get(0);
 
-		// get data type
+		//get data type
 		checkNext(JsonToken.VALUE_STRING);
 		String dataTypeStr = parser.getText().toLowerCase();
 		VCardDataType dataType = "unknown".equals(dataTypeStr) ? null : VCardDataType.get(dataTypeStr);
 
-		// get property value(s)
+		//get property value(s)
 		List<JsonValue> values = parseValues();
 
 		JCardValue value = new JCardValue(values);
@@ -185,7 +177,7 @@
 			String parameterName = parser.getText();
 
 			if (parser.nextToken() == JsonToken.START_ARRAY) {
-				// multi-valued parameter
+				//multi-valued parameter
 				while (parser.nextToken() != JsonToken.END_ARRAY) {
 					parameters.put(parameterName, parser.getText());
 				}
@@ -199,12 +191,13 @@
 
 	private List<JsonValue> parseValues() throws IOException {
 		List<JsonValue> values = new ArrayList<JsonValue>();
-		while (parser.nextToken() != JsonToken.END_ARRAY) { // until we reach
+		while (parser.nextToken() != JsonToken.END_ARRAY) {
+			// until we reach
 															// the end of the
 															// property array
 			JsonValue value = parseValue();
 			values.add(value);
-		}
+		} 
 		return values;
 	}
 
@@ -279,7 +272,6 @@
 
 	/**
 	 * Determines whether the end of the data stream has been reached.
-	 * 
 	 * @return true if the end has been reached, false if not
 	 */
 	public boolean eof() {
@@ -288,7 +280,6 @@
 
 	/**
 	 * Handles the vCard data as it is read off the data stream.
-	 * 
 	 * @author Michael Angstadt
 	 */
 	public interface JCardDataStreamListener {
@@ -299,20 +290,13 @@
 
 		/**
 		 * Called when a property is read.
-		 * 
-		 * @param group
-		 *            the group or null if there is not group
-		 * @param propertyName
-		 *            the property name (e.g. "summary")
-		 * @param parameters
-		 *            the parameters
-		 * @param dataType
-		 *            the data type or null for "unknown"
-		 * @param value
-		 *            the property value
+		 * @param group the group or null if there is not group
+		 * @param propertyName the property name (e.g. "summary")
+		 * @param parameters the parameters
+		 * @param dataType the data type or null for "unknown"
+		 * @param value the property value
 		 */
-		void readProperty(String group, String propertyName, VCardParameters parameters, VCardDataType dataType,
-				JCardValue value);
+		void readProperty(String group, String propertyName, VCardParameters parameters, VCardDataType dataType, JCardValue value);
 	}
 
 	/**
@@ -326,4 +310,4 @@
 			reader.close();
 		}
 	}
-}
+}
\ No newline at end of file
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardRawWriter.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardRawWriter.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardRawWriter.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardRawWriter.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,65 +1,70 @@
 package ezvcard.io.json;
 
-import static ezvcard.util.StringUtils.NEWLINE;
-
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonGenerator.Feature;
+import com.fasterxml.jackson.core.JsonGenerator;
+import ezvcard.Messages;
+import ezvcard.VCardDataType;
+import ezvcard.parameter.VCardParameters;
+import ezvcard.util.StringUtils;
 import java.io.Closeable;
 import java.io.Flushable;
 import java.io.IOException;
 import java.io.Writer;
 import java.util.List;
 import java.util.Map;
+import static ezvcard.util.StringUtils.NEWLINE;
 
-import com.fasterxml.jackson.core.JsonFactory;
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.JsonGenerator.Feature;
 
-import ezvcard.Messages;
-import ezvcard.VCardDataType;
-import ezvcard.parameter.VCardParameters;
-import ezvcard.util.StringUtils;
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
 
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
 /**
  * Writes data to an vCard JSON data stream (jCard).
  * @author Michael Angstadt
  * @see <a href="http://tools.ietf.org/html/rfc7095">RFC 7095</a>
  */
-public class JCardRawWriter implements Closeable, Flushable {
+public class JCardRawWriter implements Closeable , Flushable {
 	private final Writer writer;
+
 	private final boolean wrapInArray;
+
 	private JsonGenerator generator;
+
 	private boolean indent = false;
+
 	private boolean open = false;
+
 	private boolean closeGenerator = true;
 
 	/**
-	 * @param writer the writer to wrap
-	 * @param wrapInArray true to wrap everything in an array, false not to
-	 * (useful when writing more than one vCard)
+	 *
+	 *
+	 * @param writer
+	 * 		the writer to wrap
+	 * @param wrapInArray
+	 * 		true to wrap everything in an array, false not to
+	 * 		(useful when writing more than one vCard)
 	 */
 	public JCardRawWriter(Writer writer, boolean wrapInArray) {
 		this.writer = writer;
@@ -67,7 +72,10 @@
 	}
 
 	/**
-	 * @param generator the generator to write to
+	 *
+	 *
+	 * @param generator
+	 * 		the generator to write to
 	 */
 	public JCardRawWriter(JsonGenerator generator) {
 		this.writer = null;
@@ -293,16 +301,13 @@
 		if (generator == null) {
 			return;
 		}
-
 		while (open) {
 			writeEndVCard();
-		}
-
+		} 
 		if (wrapInArray) {
 			indent(0);
 			generator.writeEndArray();
 		}
-
 		if (closeGenerator) {
 			generator.close();
 		}
@@ -317,7 +322,6 @@
 		if (generator == null) {
 			return;
 		}
-
 		closeJsonStream();
 		if (writer != null) {
 			writer.close();
@@ -334,4 +338,4 @@
 			indent(0);
 		}
 	}
-}
+}
\ No newline at end of file
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardReader.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardReader.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardReader.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardReader.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,17 +1,6 @@
 package ezvcard.io.json;
 
-import static ezvcard.util.IOUtils.utf8Reader;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.Reader;
-import java.io.StringReader;
-
 import com.fasterxml.jackson.core.JsonParser;
-
 import ezvcard.VCard;
 import ezvcard.VCardDataType;
 import ezvcard.VCardVersion;
@@ -21,41 +10,48 @@
 import ezvcard.io.StreamReader;
 import ezvcard.io.json.JCardRawReader.JCardDataStreamListener;
 import ezvcard.io.scribe.RawPropertyScribe;
-import ezvcard.io.scribe.VCardPropertyScribe;
 import ezvcard.io.scribe.VCardPropertyScribe.Result;
+import ezvcard.io.scribe.VCardPropertyScribe;
 import ezvcard.parameter.VCardParameters;
 import ezvcard.property.RawProperty;
 import ezvcard.property.VCardProperty;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+import java.io.StringReader;
+import static ezvcard.util.IOUtils.utf8Reader;
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
- The views and conclusions contained in the software and documentation are those
- of the authors and should not be interpreted as representing official policies, 
- either expressed or implied, of the FreeBSD Project.
- */
 
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
+
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies, 
+either expressed or implied, of the FreeBSD Project.
+ */
 /**
  * <p>
  * Parses {@link VCard} objects from a JSON data stream (jCard format).
@@ -85,36 +81,52 @@
 	private final JCardRawReader reader;
 
 	/**
-	 * @param json the JSON string to read from
+	 *
+	 *
+	 * @param json
+	 * 		the JSON string to read from
 	 */
 	public JCardReader(String json) {
 		this(new StringReader(json));
 	}
 
 	/**
-	 * @param in the input stream to read from
+	 *
+	 *
+	 * @param in
+	 * 		the input stream to read from
 	 */
 	public JCardReader(InputStream in) {
 		this(utf8Reader(in));
 	}
 
 	/**
-	 * @param file the file to read from
-	 * @throws FileNotFoundException if the file doesn't exist
+	 *
+	 *
+	 * @param file
+	 * 		the file to read from
+	 * @throws FileNotFoundException
+	 * 		if the file doesn't exist
 	 */
 	public JCardReader(File file) throws FileNotFoundException {
 		this(new BufferedReader(utf8Reader(file)));
 	}
 
 	/**
-	 * @param reader the reader to read from
+	 *
+	 *
+	 * @param reader
+	 * 		the reader to read from
 	 */
 	public JCardReader(Reader reader) {
 		this.reader = new JCardRawReader(reader);
 	}
 
 	/**
-	 * @param parser the parser to read from
+	 *
+	 *
+	 * @param parser
+	 * 		the parser to read from
 	 */
 	public JCardReader(JsonParser parser) {
 		this.reader = new JCardRawReader(parser, true);
@@ -143,6 +155,7 @@
 
 	private class JCardDataStreamListenerImpl implements JCardDataStreamListener {
 		private VCard vcard = null;
+
 		private boolean versionFound = false;
 
 		public void beginVCard() {
@@ -152,21 +165,18 @@
 
 		public void readProperty(String group, String propertyName, VCardParameters parameters, VCardDataType dataType, JCardValue value) {
 			if ("version".equalsIgnoreCase(propertyName)) {
-				//don't unmarshal "version" because we don't treat it as a property
+				// don't unmarshal "version" because we don't treat it as a property
 				versionFound = true;
-
 				VCardVersion version = VCardVersion.valueOfByStr(value.asSingle());
 				if (version != VCardVersion.V4_0) {
 					warnings.add(reader.getLineNum(), propertyName, 30);
 				}
 				return;
 			}
-
 			VCardPropertyScribe<? extends VCardProperty> scribe = index.getPropertyScribe(propertyName);
 			if (scribe == null) {
 				scribe = new RawPropertyScribe(propertyName);
 			}
-
 			Result<? extends VCardProperty> result;
 			try {
 				result = scribe.parseJson(value, dataType, parameters);
@@ -179,18 +189,16 @@
 			} catch (CannotParseException e) {
 				scribe = new RawPropertyScribe(propertyName);
 				result = scribe.parseJson(value, dataType, parameters);
-
 				VCardProperty property = result.getProperty();
-				String valueStr = ((RawProperty) property).getValue();
+				String valueStr = ((RawProperty) (property)).getValue();
 				warnings.add(reader.getLineNum(), propertyName, 25, valueStr, e.getMessage());
 			} catch (EmbeddedVCardException e) {
 				warnings.add(reader.getLineNum(), propertyName, 31);
 				return;
 			}
-
 			VCardProperty property = result.getProperty();
 			property.setGroup(group);
 			vcard.addProperty(property);
 		}
 	}
-}
+}
\ No newline at end of file
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardWriter.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardWriter.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/main/java/ezvcard/io/json/JCardWriter.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/main/java/ezvcard/io/json/JCardWriter.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,16 +1,6 @@
 package ezvcard.io.json;
 
-import static ezvcard.util.IOUtils.utf8Writer;
-
-import java.io.File;
-import java.io.Flushable;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.Writer;
-import java.util.List;
-
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import ezvcard.VCard;
 import ezvcard.VCardDataType;
 import ezvcard.VCardVersion;
@@ -20,36 +10,42 @@
 import ezvcard.io.scribe.VCardPropertyScribe;
 import ezvcard.parameter.VCardParameters;
 import ezvcard.property.VCardProperty;
+import java.io.File;
+import java.io.Flushable;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.Writer;
+import java.util.List;
+import static ezvcard.util.IOUtils.utf8Writer;
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
- The views and conclusions contained in the software and documentation are those
- of the authors and should not be interpreted as representing official policies, 
- either expressed or implied, of the FreeBSD Project.
- */
 
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
+
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies, 
+either expressed or implied, of the FreeBSD Project.
+ */
 /**
  * <p>
  * Writes {@link VCard} objects to a JSON data stream (jCard format).
@@ -77,60 +73,87 @@
  */
 public class JCardWriter extends StreamWriter implements Flushable {
 	private final JCardRawWriter writer;
+
 	private final VCardVersion targetVersion = VCardVersion.V4_0;
 
 	/**
-	 * @param out the output stream to write to (UTF-8 encoding will be used)
+	 *
+	 *
+	 * @param out
+	 * 		the output stream to write to (UTF-8 encoding will be used)
 	 */
 	public JCardWriter(OutputStream out) {
 		this(utf8Writer(out));
 	}
 
 	/**
-	 * @param out the output stream to write to (UTF-8 encoding will be used)
-	 * @param wrapInArray true to enclose all written vCards in a JSON array,
-	 * false not to
+	 *
+	 *
+	 * @param out
+	 * 		the output stream to write to (UTF-8 encoding will be used)
+	 * @param wrapInArray
+	 * 		true to enclose all written vCards in a JSON array,
+	 * 		false not to
 	 */
 	public JCardWriter(OutputStream out, boolean wrapInArray) {
 		this(utf8Writer(out), wrapInArray);
 	}
 
 	/**
-	 * @param file the file to write to (UTF-8 encoding will be used)
-	 * @throws IOException if there's a problem opening the file
+	 *
+	 *
+	 * @param file
+	 * 		the file to write to (UTF-8 encoding will be used)
+	 * @throws IOException
+	 * 		if there's a problem opening the file
 	 */
 	public JCardWriter(File file) throws IOException {
 		this(utf8Writer(file));
 	}
 
 	/**
-	 * @param file the file to write to (UTF-8 encoding will be used)
-	 * @param wrapInArray true to enclose all written vCards in a JSON array,
-	 * false not to
-	 * @throws IOException if there's a problem opening the file
+	 *
+	 *
+	 * @param file
+	 * 		the file to write to (UTF-8 encoding will be used)
+	 * @param wrapInArray
+	 * 		true to enclose all written vCards in a JSON array,
+	 * 		false not to
+	 * @throws IOException
+	 * 		if there's a problem opening the file
 	 */
 	public JCardWriter(File file, boolean wrapInArray) throws IOException {
 		this(utf8Writer(file), wrapInArray);
 	}
 
 	/**
-	 * @param writer the writer to write to
+	 *
+	 *
+	 * @param writer
+	 * 		the writer to write to
 	 */
 	public JCardWriter(Writer writer) {
 		this(writer, false);
 	}
 
 	/**
-	 * @param writer the writer to write to
-	 * @param wrapInArray true to enclose all written vCards in a JSON array,
-	 * false not to
+	 *
+	 *
+	 * @param writer
+	 * 		the writer to write to
+	 * @param wrapInArray
+	 * 		true to enclose all written vCards in a JSON array,
+	 * 		false not to
 	 */
 	public JCardWriter(Writer writer, boolean wrapInArray) {
 		this.writer = new JCardRawWriter(writer, wrapInArray);
 	}
 
 	/**
-	 * @param generator the generator to write to
+	 *
+	 *
+	 * @param generator
+	 * 		the generator to write to
 	 */
 	public JCardWriter(JsonGenerator generator) {
 		this.writer = new JCardRawWriter(generator);
@@ -221,4 +244,4 @@
 	public void close() throws IOException {
 		writer.close();
 	}
-}
+}
\ No newline at end of file
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/test/java/ezvcard/io/json/JCardRawReaderTest.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/test/java/ezvcard/io/json/JCardRawReaderTest.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/test/java/ezvcard/io/json/JCardRawReaderTest.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/test/java/ezvcard/io/json/JCardRawReaderTest.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,5 +1,16 @@
 package ezvcard.io.json;
 
+import com.fasterxml.jackson.core.JsonToken;
+import ezvcard.VCardDataType;
+import ezvcard.io.json.JCardRawReader.JCardDataStreamListener;
+import ezvcard.parameter.VCardParameters;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.junit.Test;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
@@ -8,46 +19,30 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.junit.Test;
 
-import com.fasterxml.jackson.core.JsonToken;
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
 
-import ezvcard.VCardDataType;
-import ezvcard.io.json.JCardRawReader.JCardDataStreamListener;
-import ezvcard.parameter.VCardParameters;
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 /**
  * @author Michael Angstadt
  */
@@ -112,23 +107,11 @@
 	@Test
 	public void ignore_other_json() throws Throwable {
 		//@formatter:off
-		String json =
-		"{" +
-			"\"website\": \"example.com\"," +
-			"\"vcard\":" +
-				"[\"vcard\"," +
-					"[" +
-						"[\"prop\", {}, \"text\", \"value\"]" +
-					"]" +
-				"]" +
-		"}";
-		//@formatter:on
-
+		String json = "{" + ((((((("\"website\": \"example.com\"," + "\"vcard\":") + "[\"vcard\",") + "[") + "[\"prop\", {}, \"text\", \"value\"]") + "]") + "]") + "}");
+		// @formatter:on
 		JCardRawReader reader = createReader(json);
 		JCardDataStreamListener listener = mock(JCardDataStreamListener.class);
-
 		reader.readNext(listener);
-
 		verify(listener).beginVCard();
 		verify(listener).readProperty(null, "prop", new VCardParameters(), VCardDataType.TEXT, JCardValue.single("value"));
 		verifyNoMoreInteractions(listener);
@@ -437,4 +420,4 @@
 	private static JCardRawReader createReader(String json) {
 		return new JCardRawReader(new StringReader(json));
 	}
-}
+}
\ No newline at end of file
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/test/java/ezvcard/io/json/JCardReaderTest.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/test/java/ezvcard/io/json/JCardReaderTest.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/test/java/ezvcard/io/json/JCardReaderTest.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/test/java/ezvcard/io/json/JCardReaderTest.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,5 +1,28 @@
 package ezvcard.io.json;
 
+import ezvcard.VCard;
+import ezvcard.VCardDataType;
+import ezvcard.VCardVersion;
+import ezvcard.io.MyFormattedNameProperty.MyFormattedNameScribe;
+import ezvcard.io.MyFormattedNameProperty;
+import ezvcard.io.scribe.CannotParseScribe;
+import ezvcard.io.scribe.SkipMeScribe;
+import ezvcard.io.scribe.VCardPropertyScribe;
+import ezvcard.parameter.AddressType;
+import ezvcard.parameter.EmailType;
+import ezvcard.parameter.TelephoneType;
+import ezvcard.parameter.VCardParameters;
+import ezvcard.property.VCardProperty;
+import ezvcard.util.IOUtils;
+import ezvcard.util.PartialDate;
+import ezvcard.util.TelUri;
+import ezvcard.util.UtcOffset;
+import java.io.File;
+import java.io.Writer;
+import java.util.List;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
 import static ezvcard.VCardVersion.V4_0;
 import static ezvcard.property.asserter.PropertyAsserter.assertAddress;
 import static ezvcard.property.asserter.PropertyAsserter.assertBinaryProperty;
@@ -20,61 +43,34 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import java.io.File;
-import java.io.Writer;
-import java.util.List;
 
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
 
-import ezvcard.VCard;
-import ezvcard.VCardDataType;
-import ezvcard.VCardVersion;
-import ezvcard.io.MyFormattedNameProperty;
-import ezvcard.io.MyFormattedNameProperty.MyFormattedNameScribe;
-import ezvcard.io.scribe.CannotParseScribe;
-import ezvcard.io.scribe.SkipMeScribe;
-import ezvcard.io.scribe.VCardPropertyScribe;
-import ezvcard.parameter.AddressType;
-import ezvcard.parameter.EmailType;
-import ezvcard.parameter.TelephoneType;
-import ezvcard.parameter.VCardParameters;
-import ezvcard.property.VCardProperty;
-import ezvcard.util.IOUtils;
-import ezvcard.util.PartialDate;
-import ezvcard.util.TelUri;
-import ezvcard.util.UtcOffset;
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
- The views and conclusions contained in the software and documentation are those
- of the authors and should not be interpreted as representing official policies, 
- either expressed or implied, of the FreeBSD Project.
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies, 
+either expressed or implied, of the FreeBSD Project.
  */
-
 /**
  * @author Michael Angstadt
  */
@@ -319,22 +315,14 @@
 
 	@Test
 	public void readExtendedType_override_standard_type_classes() throws Throwable {
-		//@formatter:off
-		String json =
-		  "[\"vcard\"," +
-		    "[" +
-		      "[\"version\", {}, \"text\", \"4.0\"]," +
-		      "[\"fn\", {}, \"text\", \"John Doe\"]" +
-		    "]" +
-		  "]";
-		//@formatter:on
-
+		// @formatter:off
+		String json = "[\"vcard\"," + (((("[" + "[\"version\", {}, \"text\", \"4.0\"],") + "[\"fn\", {}, \"text\", \"John Doe\"]") + "]") + "]");
+		// @formatter:on
 		JCardReader reader = new JCardReader(json);
 		reader.registerScribe(new MyFormattedNameScribe());
 		VCard vcard = reader.readNext();
 		assertPropertyCount(1, vcard);
 		assertVersion(V4_0, vcard);
-
 		MyFormattedNameProperty prop = vcard.getProperty(MyFormattedNameProperty.class);
 		assertEquals("JOHN DOE", prop.value);
 		assertWarnings(0, reader);
@@ -436,7 +424,7 @@
 
 	private static class TypeForTestingScribe extends VCardPropertyScribe<TypeForTesting> {
 		public TypeForTestingScribe() {
-			super(TypeForTesting.class, "X-TYPE");
+			super(JCardReaderTest.TypeForTesting.class, "X-TYPE");
 		}
 
 		@Override
@@ -458,17 +446,13 @@
 		protected TypeForTesting _parseJson(JCardValue value, VCardDataType dataType, VCardParameters parameters, List<String> warnings) {
 			return new TypeForTesting(value);
 		}
-
 	}
 
 	@Test
 	public void jcard_example() throws Throwable {
 		JCardReader reader = new JCardReader(getClass().getResourceAsStream("jcard-example.json"));
-
 		VCard vcard = reader.readNext();
-		
 		validateExampleJCard(vcard);
-		
 		assertWarnings(0, reader);
 		assertNoMoreVCards(reader);
 	}
@@ -476,86 +460,22 @@
 	public static void validateExampleJCard(VCard vcard) {
 		assertVersion(V4_0, vcard);
 		assertPropertyCount(16, vcard);
-
 		//@formatter:off
-		assertSimpleProperty(vcard.getFormattedNames())
-			.value("Simon Perreault")
-		.noMore();
-		
-		assertStructuredName(vcard)
-			.family("Perreault")
-			.given("Simon")
-			.suffixes("ing. jr", "M.Sc.")
-			.noMore();
-		
-		assertDateProperty(vcard.getBirthdays())
-			.partialDate(PartialDate.builder().month(2).date(3).build())
-		.noMore();
-		
-		assertDateProperty(vcard.getAnniversaries())
-			.date("2009-08-08 19:30:00 +0000")
-		.noMore();
-		
+		assertSimpleProperty(vcard.getFormattedNames()).value("Simon Perreault").noMore();
+		assertStructuredName(vcard).family("Perreault").given("Simon").suffixes("ing. jr", "M.Sc.").noMore();
+		assertDateProperty(vcard.getBirthdays()).partialDate(PartialDate.builder().month(2).date(3).build()).noMore();
+		assertDateProperty(vcard.getAnniversaries()).date("2009-08-08 19:30:00 +0000").noMore();
 		assertTrue(vcard.getGender().isMale());
-		
-		assertSimpleProperty(vcard.getLanguages())
-			.value("fr")
-			.param("PREF", "1")
-		.next()
-			.value("en")
-			.param("PREF", "2")
-		.noMore();
-		
-		assertListProperty(vcard.getOrganizations())
-			.values("Viagenie")
-			.param("TYPE", "work")
-		.noMore();
-		
-		assertAddress(vcard)
-			.extendedAddress("Suite D2-630")
-			.streetAddress("2875 Laurier")
-			.locality("Quebec")
-			.region("QC")
-			.postalCode("G1V 2M2")
-			.country("Canada")
-			.types(AddressType.WORK)
-		.noMore();
-		
-		assertTelephone(vcard)
-			.uri(new TelUri.Builder("+1-418-656-9254").extension("102").build())
-			.types(TelephoneType.WORK, TelephoneType.VOICE)
-			.param("PREF", "1")
-		.next()
-			.uri(new TelUri.Builder("+1-418-262-6501").build())
-			.types(TelephoneType.WORK, TelephoneType.CELL, TelephoneType.VOICE, TelephoneType.VIDEO, TelephoneType.TEXT)
-		.noMore();
-		
-		assertEmail(vcard)
-			.value("simon.perreault@viagenie.ca")
-			.types(EmailType.WORK)
-		.noMore();
-		
-		assertGeo(vcard)
-			.latitude(46.772673)
-			.longitude(-71.282945)
-			.param("TYPE", "work")
-		.noMore();
-		
-		assertBinaryProperty(vcard.getKeys())
-			.url("http://www.viagenie.ca/simon.perreault/simon.asc")
-			.param("TYPE","work")
-		.noMore();
-		
-		assertTimezone(vcard)
-			.offset(new UtcOffset(false, -5, 0))
-		.noMore();
-		
-		assertSimpleProperty(vcard.getUrls())
-			.value("http://nomis80.org")
-			.param("TYPE", "home")
-		.noMore();
+		assertSimpleProperty(vcard.getLanguages()).value("fr").param("PREF", "1").next().value("en").param("PREF", "2").noMore();
+		assertListProperty(vcard.getOrganizations()).values("Viagenie").param("TYPE", "work").noMore();
+		assertAddress(vcard).extendedAddress("Suite D2-630").streetAddress("2875 Laurier").locality("Quebec").region("QC").postalCode("G1V 2M2").country("Canada").types(AddressType.WORK).noMore();
+		assertTelephone(vcard).uri(new TelUri.Builder("+1-418-656-9254").extension("102").build()).types(TelephoneType.WORK, TelephoneType.VOICE).param("PREF", "1").next().uri(new TelUri.Builder("+1-418-262-6501").build()).types(TelephoneType.WORK, TelephoneType.CELL, TelephoneType.VOICE, TelephoneType.VIDEO, TelephoneType.TEXT).noMore();
+		assertEmail(vcard).value("simon.perreault@viagenie.ca").types(EmailType.WORK).noMore();
+		assertGeo(vcard).latitude(46.772673).longitude(-71.282945).param("TYPE", "work").noMore();
+		assertBinaryProperty(vcard.getKeys()).url("http://www.viagenie.ca/simon.perreault/simon.asc").param("TYPE", "work").noMore();
+		assertTimezone(vcard).offset(new UtcOffset(false, -5, 0)).noMore();
+		assertSimpleProperty(vcard.getUrls()).value("http://nomis80.org").param("TYPE", "home").noMore();
 		//@formatter:on
-
 		assertValidate(vcard).versions(vcard.getVersion()).run();
 	}
-}
+}
\ No newline at end of file
diff -u -r -x '*/\.git*' .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/test/java/ezvcard/io/json/JCardWriterTest.java .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/test/java/ezvcard/io/json/JCardWriterTest.java
--- .workdir/a11303ebb52d489cb78fed063112ed0f/ez-vcard/src/test/java/ezvcard/io/json/JCardWriterTest.java	2023-08-14 14:25:32.231785343 +0200
+++ .workdir/a1208d77e22340729d23daf984ad342a/ez-vcard/src/test/java/ezvcard/io/json/JCardWriterTest.java	2023-08-14 14:25:59.055565527 +0200
@@ -1,18 +1,5 @@
 package ezvcard.io.json;
 
-import static ezvcard.util.StringUtils.NEWLINE;
-import static ezvcard.util.TestUtils.assertValidate;
-import static org.junit.Assert.assertEquals;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.StringWriter;
-import java.util.List;
-
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
-
 import ezvcard.VCard;
 import ezvcard.VCardDataType;
 import ezvcard.VCardVersion;
@@ -37,36 +24,45 @@
 import ezvcard.util.PartialDate;
 import ezvcard.util.TelUri;
 import ezvcard.util.UtcOffset;
+import java.io.File;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.List;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+import static ezvcard.util.StringUtils.NEWLINE;
+import static ezvcard.util.TestUtils.assertValidate;
+import static org.junit.Assert.assertEquals;
 
-/*
- Copyright (c) 2012-2016, Michael Angstadt
- All rights reserved.
-
- Redistribution and use in source and binary forms, with or without
- modification, are permitted provided that the following conditions are met: 
-
- 1. Redistributions of source code must retain the above copyright notice, this
- list of conditions and the following disclaimer. 
- 2. Redistributions in binary form must reproduce the above copyright notice,
- this list of conditions and the following disclaimer in the documentation
- and/or other materials provided with the distribution. 
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
- The views and conclusions contained in the software and documentation are those
- of the authors and should not be interpreted as representing official policies, 
- either expressed or implied, of the FreeBSD Project.
- */
 
+/* Copyright (c) 2012-2016, Michael Angstadt
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met: 
+
+1. Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer. 
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution. 
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies, 
+either expressed or implied, of the FreeBSD Project.
+ */
 /**
  * @author Michael Angstadt
  */
@@ -280,7 +276,6 @@
 	@Test
 	public void jcard_example() throws Throwable {
 		VCard vcard = createExample();
-
 		assertValidate(vcard).versions(VCardVersion.V4_0).run();
 		StringWriter sw = new StringWriter();
 		JCardWriter writer = new JCardWriter(sw);
@@ -288,35 +283,26 @@
 		writer.write(vcard);
 		writer.close();
 		String actual = sw.toString();
-
 		assertExample(actual, "jcard-example.json");
 	}
 
 	public static VCard createExample() {
 		VCard vcard = new VCard();
-
 		vcard.setFormattedName("SimonPerreault");
-
 		StructuredName n = new StructuredName();
 		n.setFamily("Perreault");
 		n.setGiven("Simon");
 		n.addSuffix("ing.jr");
 		n.addSuffix("M.Sc.");
 		vcard.setStructuredName(n);
-
 		Birthday bday = new Birthday(PartialDate.builder().month(2).date(3).build());
 		vcard.setBirthday(bday);
-
 		Anniversary anniversary = new Anniversary(PartialDate.builder().year(2009).month(8).date(8).hour(14).minute(30).second(0).offset(new UtcOffset(false, -5, 0)).build());
 		vcard.setAnniversary(anniversary);
-
 		vcard.setGender(Gender.male());
-
 		vcard.addLanguage("fr").setPref(1);
 		vcard.addLanguage("en").setPref(2);
-
 		vcard.setOrganization("Viagenie").setType("work");
-
 		Address adr = new Address();
 		adr.setExtendedAddress("SuiteD2-630");
 		adr.setStreetAddress("2875Laurier");
@@ -326,14 +312,12 @@
 		adr.setCountry("Canada");
 		adr.getTypes().add(AddressType.WORK);
 		vcard.addAddress(adr);
-
 		TelUri telUri = new TelUri.Builder("+1-418-656-9254").extension("102").build();
 		Telephone tel = new Telephone(telUri);
 		tel.getTypes().add(TelephoneType.WORK);
 		tel.getTypes().add(TelephoneType.VOICE);
 		tel.setPref(1);
 		vcard.addTelephoneNumber(tel);
-
 		tel = new Telephone(new TelUri.Builder("+1-418-262-6501").build());
 		tel.getTypes().add(TelephoneType.WORK);
 		tel.getTypes().add(TelephoneType.CELL);
@@ -341,19 +325,14 @@
 		tel.getTypes().add(TelephoneType.VIDEO);
 		tel.getTypes().add(TelephoneType.TEXT);
 		vcard.addTelephoneNumber(tel);
-
 		vcard.addEmail("simon.perreault@viagenie.ca", EmailType.WORK);
-
 		Geo geo = new Geo(46.772673, -71.282945);
 		geo.setType("work");
 		vcard.setGeo(geo);
-
 		Key key = new Key("http://www.viagenie.ca/simon.perreault/simon.asc", null);
 		key.setType("work");
 		vcard.addKey(key);
-
 		vcard.setTimezone(new Timezone(new UtcOffset(false, -5, 0)));
-
 		vcard.addUrl("http://nomis80.org").setType("home");
 		return vcard;
 	}
@@ -361,25 +340,23 @@
 	public static void assertExample(String actual, String exampleFileName) throws IOException {
 		Filter filter = new Filter() {
 			public String filter(String json) {
-				//replace "date-and-or-time" data types with the data types ez-vcard uses
-				//ez-vcard avoids the use of "date-and-or-time"
+				// replace "date-and-or-time" data types with the data types ez-vcard uses
+				// ez-vcard avoids the use of "date-and-or-time"
 				json = json.replaceAll("\"bday\",\\{\\},\"date-and-or-time\"", "\"bday\",{},\"date\"");
 				json = json.replaceAll("\"anniversary\",\\{\\},\"date-and-or-time\"", "\"anniversary\",{},\"date-time\"");
 				return json;
 			}
 		};
-
 		String expected = new String(IOUtils.toByteArray(JCardWriterTest.class.getResourceAsStream(exampleFileName)));
 		expected = expected.replaceAll("\\s", "");
 		if (filter != null) {
 			expected = filter.filter(expected);
 		}
-
 		assertEquals(expected, actual);
 	}
 
 	private interface Filter {
-		String filter(String json);
+		public abstract String filter(String json);
 	}
 
 	private static class TestProperty extends VCardProperty {
@@ -397,7 +374,7 @@
 
 	private static class TestScribe extends VCardPropertyScribe<TestProperty> {
 		public TestScribe() {
-			super(TestProperty.class, "X-TYPE");
+			super(JCardWriterTest.TestProperty.class, "X-TYPE");
 		}
 
 		@Override
@@ -420,4 +397,4 @@
 			return property.value;
 		}
 	}
-}
+}
\ No newline at end of file
