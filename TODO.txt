In latex_output.py, merge_tester.py, and elsewhere, please don't hard-code the three different merge tools.  Instead, have a list (just once) of them, and the script should iterate over that list.  This probably requires using a data structure, rather than 4 different variables, to hold the info about merge tool results.  This will probably also fix the problem that the main routine is so long, by adding subroutines.

latex_output.py:
It would be nice to test the latex_output.py script as part of the "small test".
In the paper, the generated LaTeX table should appear in its own file, to reduce the possibility of cut-and-paste errors.
In latex_output.py, say where the output should be copied to.
In latex_output.py, the arguments --result_path and --output_path sound very similar.  I suggest clarifying the names.
In latex_output.py, the use of bitwise operators is very subtle.  Consider making it a bit more explicit, say by using `int(bool(foo) and bool(bar))` rather than `foo & bar`.

merge_tester.py:
Rather than variables idx2 and row2, I would find "merge_idx" or "idx_merge" clearer.

parent_merges_test.py:
The documentation says both "--repos_csv <path_to_repo>" and "for each repository"; please clarify.
The documentation says both "takes a list of merges" and "--merges-path" which is a directory; please clarify.
What is the magic number 40?  Is it the length of a SHA?  Please document.
Rather than using `zip_longest` to interleave testing to reduce the probability that tests at the same hash happen in parallel, I suggest using a lock file.  If the output directory already exists but the results file does not, then just wait for the result.
Should this:
        if not os.path.isfile(merge_list_file):
            continue
raise an error rather than continuing?

store_main_hashes.py:
get_latest_hash says: "Args: arg (idx,str)", but the second argument is a row (a hash table) rather than a string.
Does get_latest_hash side-effect its second argument, or does it operate on a copy?
Why desn't check_repo (which I renamed to head_passes_tests) return a boolean rather than numeric value?
Also, the documentation "int: 1 if the repo is valid (main head passes tests)" is inconsistent with the value of result_interpretable.  result_interpretable can be a class variable rather than created anew on each call to the routine.

That routine says "arg (str): Information regarding that repo.", but the argument is a row.

intellimerge.sh:
Why is it required that all of m1a, m2a, and m3a differ.  Isn't it enough for any one of them to differ?
